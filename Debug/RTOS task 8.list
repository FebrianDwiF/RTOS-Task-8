
RTOS task 8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004958  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08004a68  08004a68  00005a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bf8  08004bf8  0000606c  2**0
                  CONTENTS
  4 .ARM          00000000  08004bf8  08004bf8  0000606c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bf8  08004bf8  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf8  08004bf8  00005bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bfc  08004bfc  00005bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004c00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000116c  2000006c  08004c6c  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011d8  08004c6c  000061d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d17e  00000000  00000000  00006095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268c  00000000  00000000  00013213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  000158a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000989  00000000  00000000  00016528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194f1  00000000  00000000  00016eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa88  00000000  00000000  000303a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c9b8  00000000  00000000  0003fe2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc7e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000381c  00000000  00000000  000cc828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000d0044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004a50 	.word	0x08004a50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08004a50 	.word	0x08004a50

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000088 	.word	0x20000088
 800017c:	200000dc 	.word	0x200000dc

08000180 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000188:	1d39      	adds	r1, r7, #4
 800018a:	f04f 33ff 	mov.w	r3, #4294967295
 800018e:	2201      	movs	r2, #1
 8000190:	4803      	ldr	r0, [pc, #12]	@ (80001a0 <__io_putchar+0x20>)
 8000192:	f001 fa73 	bl	800167c <HAL_UART_Transmit>
    return ch;
 8000196:	687b      	ldr	r3, [r7, #4]
}
 8000198:	4618      	mov	r0, r3
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	200002dc 	.word	0x200002dc

080001a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a4:	b5b0      	push	{r4, r5, r7, lr}
 80001a6:	b090      	sub	sp, #64	@ 0x40
 80001a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001aa:	f000 fae7 	bl	800077c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ae:	f000 f843 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b2:	f000 f8a7 	bl	8000304 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001b6:	f000 f87b 	bl	80002b0 <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of CriticalResourceSemaphore */
  osSemaphoreDef(CriticalResourceSemaphore);
 80001ba:	2300      	movs	r3, #0
 80001bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80001be:	2300      	movs	r3, #0
 80001c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  CriticalResourceSemaphoreHandle = osSemaphoreCreate(osSemaphore(CriticalResourceSemaphore), 1);
 80001c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80001c6:	2101      	movs	r1, #1
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 fcba 	bl	8001b42 <osSemaphoreCreate>
 80001ce:	4603      	mov	r3, r0
 80001d0:	4a14      	ldr	r2, [pc, #80]	@ (8000224 <main+0x80>)
 80001d2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001d4:	4b14      	ldr	r3, [pc, #80]	@ (8000228 <main+0x84>)
 80001d6:	f107 041c 	add.w	r4, r7, #28
 80001da:	461d      	mov	r5, r3
 80001dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001e8:	f107 031c 	add.w	r3, r7, #28
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f001 fc47 	bl	8001a82 <osThreadCreate>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4a0d      	ldr	r2, [pc, #52]	@ (800022c <main+0x88>)
 80001f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityIdle, 0, 128);
 80001fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000230 <main+0x8c>)
 80001fc:	463c      	mov	r4, r7
 80001fe:	461d      	mov	r5, r3
 8000200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000204:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000208:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 800020c:	463b      	mov	r3, r7
 800020e:	2100      	movs	r1, #0
 8000210:	4618      	mov	r0, r3
 8000212:	f001 fc36 	bl	8001a82 <osThreadCreate>
 8000216:	4603      	mov	r3, r0
 8000218:	4a06      	ldr	r2, [pc, #24]	@ (8000234 <main+0x90>)
 800021a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800021c:	f001 fc2a 	bl	8001a74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000220:	bf00      	nop
 8000222:	e7fd      	b.n	8000220 <main+0x7c>
 8000224:	2000032c 	.word	0x2000032c
 8000228:	08004a74 	.word	0x08004a74
 800022c:	20000324 	.word	0x20000324
 8000230:	08004a98 	.word	0x08004a98
 8000234:	20000328 	.word	0x20000328

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b090      	sub	sp, #64	@ 0x40
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	2228      	movs	r2, #40	@ 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f004 f946 	bl	80044d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025a:	2302      	movs	r3, #2
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000262:	2310      	movs	r3, #16
 8000264:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000266:	2300      	movs	r3, #0
 8000268:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0318 	add.w	r3, r7, #24
 800026e:	4618      	mov	r0, r3
 8000270:	f000 fda4 	bl	8000dbc <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800027a:	f000 f903 	bl	8000484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000282:	2300      	movs	r3, #0
 8000284:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f001 f812 	bl	80012c0 <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002a2:	f000 f8ef 	bl	8000484 <Error_Handler>
  }
}
 80002a6:	bf00      	nop
 80002a8:	3740      	adds	r7, #64	@ 0x40
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002b4:	4b11      	ldr	r3, [pc, #68]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002b6:	4a12      	ldr	r2, [pc, #72]	@ (8000300 <MX_USART1_UART_Init+0x50>)
 80002b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ba:	4b10      	ldr	r3, [pc, #64]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002c8:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ce:	4b0b      	ldr	r3, [pc, #44]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002d4:	4b09      	ldr	r3, [pc, #36]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002d6:	220c      	movs	r2, #12
 80002d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002da:	4b08      	ldr	r3, [pc, #32]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e0:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002e6:	4805      	ldr	r0, [pc, #20]	@ (80002fc <MX_USART1_UART_Init+0x4c>)
 80002e8:	f001 f978 	bl	80015dc <HAL_UART_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002f2:	f000 f8c7 	bl	8000484 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	200002dc 	.word	0x200002dc
 8000300:	40013800 	.word	0x40013800

08000304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	f107 0308 	add.w	r3, r7, #8
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000318:	4b18      	ldr	r3, [pc, #96]	@ (800037c <MX_GPIO_Init+0x78>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a17      	ldr	r2, [pc, #92]	@ (800037c <MX_GPIO_Init+0x78>)
 800031e:	f043 0310 	orr.w	r3, r3, #16
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b15      	ldr	r3, [pc, #84]	@ (800037c <MX_GPIO_Init+0x78>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0310 	and.w	r3, r3, #16
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000330:	4b12      	ldr	r3, [pc, #72]	@ (800037c <MX_GPIO_Init+0x78>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a11      	ldr	r2, [pc, #68]	@ (800037c <MX_GPIO_Init+0x78>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b0f      	ldr	r3, [pc, #60]	@ (800037c <MX_GPIO_Init+0x78>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0304 	and.w	r3, r3, #4
 8000344:	603b      	str	r3, [r7, #0]
 8000346:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800034e:	480c      	ldr	r0, [pc, #48]	@ (8000380 <MX_GPIO_Init+0x7c>)
 8000350:	f000 fd02 	bl	8000d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000354:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000358:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035a:	2301      	movs	r3, #1
 800035c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035e:	2300      	movs	r3, #0
 8000360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000362:	2302      	movs	r3, #2
 8000364:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000366:	f107 0308 	add.w	r3, r7, #8
 800036a:	4619      	mov	r1, r3
 800036c:	4804      	ldr	r0, [pc, #16]	@ (8000380 <MX_GPIO_Init+0x7c>)
 800036e:	f000 fb6f 	bl	8000a50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000372:	bf00      	nop
 8000374:	3718      	adds	r7, #24
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000
 8000380:	40011000 	.word	0x40011000

08000384 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for(;;)
	  {
	    // Coba untuk mendapatkan semaphore (timeout = 100 ms)
	    if(osSemaphoreWait(CriticalResourceSemaphoreHandle, 100) == osOK)
 800038c:	4b18      	ldr	r3, [pc, #96]	@ (80003f0 <StartDefaultTask+0x6c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2164      	movs	r1, #100	@ 0x64
 8000392:	4618      	mov	r0, r3
 8000394:	f001 fc08 	bl	8001ba8 <osSemaphoreWait>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d11b      	bne.n	80003d6 <StartDefaultTask+0x52>
	    {
	      // Mengakses resource kritis
	      printf("Task sedang mengakses resource kritis...\n");
 800039e:	4815      	ldr	r0, [pc, #84]	@ (80003f4 <StartDefaultTask+0x70>)
 80003a0:	f003 ffba 	bl	8004318 <puts>

	      // Nyalakan LED1 untuk menunjukkan akses berhasil
	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);  // LED1 ON (Berhasil)
 80003a4:	2201      	movs	r2, #1
 80003a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003aa:	4813      	ldr	r0, [pc, #76]	@ (80003f8 <StartDefaultTask+0x74>)
 80003ac:	f000 fcd4 	bl	8000d58 <HAL_GPIO_WritePin>

	      // Simulasi penggunaan resource kritis
	      HAL_Delay(1000);
 80003b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003b4:	f000 fa44 	bl	8000840 <HAL_Delay>

	      // Selesai mengakses, lepaskan semaphore
	      osSemaphoreRelease(CriticalResourceSemaphoreHandle);
 80003b8:	4b0d      	ldr	r3, [pc, #52]	@ (80003f0 <StartDefaultTask+0x6c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 fc41 	bl	8001c44 <osSemaphoreRelease>

	      // Matikan LED1 setelah akses selesai
	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  // LED1 OFF
 80003c2:	2200      	movs	r2, #0
 80003c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c8:	480b      	ldr	r0, [pc, #44]	@ (80003f8 <StartDefaultTask+0x74>)
 80003ca:	f000 fcc5 	bl	8000d58 <HAL_GPIO_WritePin>

	      printf("Task selesai mengakses resource kritis.\n");
 80003ce:	480b      	ldr	r0, [pc, #44]	@ (80003fc <StartDefaultTask+0x78>)
 80003d0:	f003 ffa2 	bl	8004318 <puts>
 80003d4:	e007      	b.n	80003e6 <StartDefaultTask+0x62>
	    }
	    else
	    {
	      // Gagal mendapatkan semaphore (timeout habis)
	      printf("Task gagal mendapatkan akses ke resource kritis (timeout).\n");
 80003d6:	480a      	ldr	r0, [pc, #40]	@ (8000400 <StartDefaultTask+0x7c>)
 80003d8:	f003 ff9e 	bl	8004318 <puts>

	      // Toggle LED2 sebagai indikasi kegagalan
	      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);  // LED2 Blink (Gagal)
 80003dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003e0:	4805      	ldr	r0, [pc, #20]	@ (80003f8 <StartDefaultTask+0x74>)
 80003e2:	f000 fcd1 	bl	8000d88 <HAL_GPIO_TogglePin>
	    }

	    // Delay untuk mencegah task berjalan terus-menerus
	    osDelay(1000);
 80003e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003ea:	f001 fb96 	bl	8001b1a <osDelay>
	    if(osSemaphoreWait(CriticalResourceSemaphoreHandle, 100) == osOK)
 80003ee:	e7cd      	b.n	800038c <StartDefaultTask+0x8>
 80003f0:	2000032c 	.word	0x2000032c
 80003f4:	08004ab4 	.word	0x08004ab4
 80003f8:	40011000 	.word	0x40011000
 80003fc:	08004ae0 	.word	0x08004ae0
 8000400:	08004b08 	.word	0x08004b08

08000404 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	for(;;)
	    {
	        // Attempt to acquire semaphore with a wait time of 100ms
	        if(osSemaphoreWait(CriticalResourceSemaphoreHandle, 100) == osOK)
 800040c:	4b18      	ldr	r3, [pc, #96]	@ (8000470 <StartTask02+0x6c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2164      	movs	r1, #100	@ 0x64
 8000412:	4618      	mov	r0, r3
 8000414:	f001 fbc8 	bl	8001ba8 <osSemaphoreWait>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d11b      	bne.n	8000456 <StartTask02+0x52>
	        {
	            // Access critical resource
	            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // LED1 ON
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000424:	4813      	ldr	r0, [pc, #76]	@ (8000474 <StartTask02+0x70>)
 8000426:	f000 fc97 	bl	8000d58 <HAL_GPIO_WritePin>
	            printf("Task2 accessing critical resource...\n");
 800042a:	4813      	ldr	r0, [pc, #76]	@ (8000478 <StartTask02+0x74>)
 800042c:	f003 ff74 	bl	8004318 <puts>
	            HAL_Delay(1000);  // Simulate critical resource usage
 8000430:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000434:	f000 fa04 	bl	8000840 <HAL_Delay>

	            // Release semaphore after using resource
	            osSemaphoreRelease(CriticalResourceSemaphoreHandle);
 8000438:	4b0d      	ldr	r3, [pc, #52]	@ (8000470 <StartTask02+0x6c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4618      	mov	r0, r3
 800043e:	f001 fc01 	bl	8001c44 <osSemaphoreRelease>
	            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // LED1 OFF
 8000442:	2200      	movs	r2, #0
 8000444:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000448:	480a      	ldr	r0, [pc, #40]	@ (8000474 <StartTask02+0x70>)
 800044a:	f000 fc85 	bl	8000d58 <HAL_GPIO_WritePin>
	            printf("Task2 finished accessing critical resource.\n");
 800044e:	480b      	ldr	r0, [pc, #44]	@ (800047c <StartTask02+0x78>)
 8000450:	f003 ff62 	bl	8004318 <puts>
 8000454:	e007      	b.n	8000466 <StartTask02+0x62>
	        }
	        else
	        {
	            // Semaphore not acquired, indicate with LED2
	            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14); // LED2 Blink
 8000456:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800045a:	4806      	ldr	r0, [pc, #24]	@ (8000474 <StartTask02+0x70>)
 800045c:	f000 fc94 	bl	8000d88 <HAL_GPIO_TogglePin>
	            printf("Task2 could not access resource (timeout).\n");
 8000460:	4807      	ldr	r0, [pc, #28]	@ (8000480 <StartTask02+0x7c>)
 8000462:	f003 ff59 	bl	8004318 <puts>
	        }

	        osDelay(1000); // Delay to prevent continuous loop
 8000466:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800046a:	f001 fb56 	bl	8001b1a <osDelay>
	        if(osSemaphoreWait(CriticalResourceSemaphoreHandle, 100) == osOK)
 800046e:	e7cd      	b.n	800040c <StartTask02+0x8>
 8000470:	2000032c 	.word	0x2000032c
 8000474:	40011000 	.word	0x40011000
 8000478:	08004b44 	.word	0x08004b44
 800047c:	08004b6c 	.word	0x08004b6c
 8000480:	08004b98 	.word	0x08004b98

08000484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000488:	b672      	cpsid	i
}
 800048a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <Error_Handler+0x8>

08000490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000496:	4b18      	ldr	r3, [pc, #96]	@ (80004f8 <HAL_MspInit+0x68>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	4a17      	ldr	r2, [pc, #92]	@ (80004f8 <HAL_MspInit+0x68>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6193      	str	r3, [r2, #24]
 80004a2:	4b15      	ldr	r3, [pc, #84]	@ (80004f8 <HAL_MspInit+0x68>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ae:	4b12      	ldr	r3, [pc, #72]	@ (80004f8 <HAL_MspInit+0x68>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	4a11      	ldr	r2, [pc, #68]	@ (80004f8 <HAL_MspInit+0x68>)
 80004b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004b8:	61d3      	str	r3, [r2, #28]
 80004ba:	4b0f      	ldr	r3, [pc, #60]	@ (80004f8 <HAL_MspInit+0x68>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	210f      	movs	r1, #15
 80004ca:	f06f 0001 	mvn.w	r0, #1
 80004ce:	f000 fa96 	bl	80009fe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004d2:	4b0a      	ldr	r3, [pc, #40]	@ (80004fc <HAL_MspInit+0x6c>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	4a04      	ldr	r2, [pc, #16]	@ (80004fc <HAL_MspInit+0x6c>)
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ee:	bf00      	nop
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010000 	.word	0x40010000

08000500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a1c      	ldr	r2, [pc, #112]	@ (800058c <HAL_UART_MspInit+0x8c>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d131      	bne.n	8000584 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000520:	4b1b      	ldr	r3, [pc, #108]	@ (8000590 <HAL_UART_MspInit+0x90>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a1a      	ldr	r2, [pc, #104]	@ (8000590 <HAL_UART_MspInit+0x90>)
 8000526:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b18      	ldr	r3, [pc, #96]	@ (8000590 <HAL_UART_MspInit+0x90>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <HAL_UART_MspInit+0x90>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a14      	ldr	r2, [pc, #80]	@ (8000590 <HAL_UART_MspInit+0x90>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <HAL_UART_MspInit+0x90>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000550:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000554:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000556:	2302      	movs	r3, #2
 8000558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055a:	2303      	movs	r3, #3
 800055c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	4619      	mov	r1, r3
 8000564:	480b      	ldr	r0, [pc, #44]	@ (8000594 <HAL_UART_MspInit+0x94>)
 8000566:	f000 fa73 	bl	8000a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800056a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800056e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	4619      	mov	r1, r3
 800057e:	4805      	ldr	r0, [pc, #20]	@ (8000594 <HAL_UART_MspInit+0x94>)
 8000580:	f000 fa66 	bl	8000a50 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000584:	bf00      	nop
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40013800 	.word	0x40013800
 8000590:	40021000 	.word	0x40021000
 8000594:	40010800 	.word	0x40010800

08000598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <NMI_Handler+0x4>

080005a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <HardFault_Handler+0x4>

080005a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <MemManage_Handler+0x4>

080005b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <BusFault_Handler+0x4>

080005b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <UsageFault_Handler+0x4>

080005c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d0:	f000 f91a 	bl	8000808 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80005d4:	f002 ff80 	bl	80034d8 <xTaskGetSchedulerState>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d001      	beq.n	80005e2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80005de:	f003 fb13 	bl	8003c08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b086      	sub	sp, #24
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	60f8      	str	r0, [r7, #12]
 80005ee:	60b9      	str	r1, [r7, #8]
 80005f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	e00a      	b.n	800060e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005f8:	f3af 8000 	nop.w
 80005fc:	4601      	mov	r1, r0
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	1c5a      	adds	r2, r3, #1
 8000602:	60ba      	str	r2, [r7, #8]
 8000604:	b2ca      	uxtb	r2, r1
 8000606:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	3301      	adds	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	697a      	ldr	r2, [r7, #20]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	429a      	cmp	r2, r3
 8000614:	dbf0      	blt.n	80005f8 <_read+0x12>
  }

  return len;
 8000616:	687b      	ldr	r3, [r7, #4]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	e009      	b.n	8000646 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	60ba      	str	r2, [r7, #8]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff fda0 	bl	8000180 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	3301      	adds	r3, #1
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	697a      	ldr	r2, [r7, #20]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	429a      	cmp	r2, r3
 800064c:	dbf1      	blt.n	8000632 <_write+0x12>
  }
  return len;
 800064e:	687b      	ldr	r3, [r7, #4]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <_close>:

int _close(int file)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800067e:	605a      	str	r2, [r3, #4]
  return 0;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <_isatty>:

int _isatty(int file)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000694:	2301      	movs	r3, #1
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006c0:	4a14      	ldr	r2, [pc, #80]	@ (8000714 <_sbrk+0x5c>)
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <_sbrk+0x60>)
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006cc:	4b13      	ldr	r3, [pc, #76]	@ (800071c <_sbrk+0x64>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d102      	bne.n	80006da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006d4:	4b11      	ldr	r3, [pc, #68]	@ (800071c <_sbrk+0x64>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	@ (8000720 <_sbrk+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <_sbrk+0x64>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d207      	bcs.n	80006f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e8:	f003 ff44 	bl	8004574 <__errno>
 80006ec:	4603      	mov	r3, r0
 80006ee:	220c      	movs	r2, #12
 80006f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295
 80006f6:	e009      	b.n	800070c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f8:	4b08      	ldr	r3, [pc, #32]	@ (800071c <_sbrk+0x64>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006fe:	4b07      	ldr	r3, [pc, #28]	@ (800071c <_sbrk+0x64>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	4a05      	ldr	r2, [pc, #20]	@ (800071c <_sbrk+0x64>)
 8000708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800070a:	68fb      	ldr	r3, [r7, #12]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20005000 	.word	0x20005000
 8000718:	00000400 	.word	0x00000400
 800071c:	20000330 	.word	0x20000330
 8000720:	200011d8 	.word	0x200011d8

08000724 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000730:	f7ff fff8 	bl	8000724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000734:	480b      	ldr	r0, [pc, #44]	@ (8000764 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000736:	490c      	ldr	r1, [pc, #48]	@ (8000768 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000738:	4a0c      	ldr	r2, [pc, #48]	@ (800076c <LoopFillZerobss+0x16>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a09      	ldr	r2, [pc, #36]	@ (8000770 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800074c:	4c09      	ldr	r4, [pc, #36]	@ (8000774 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075a:	f003 ff11 	bl	8004580 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800075e:	f7ff fd21 	bl	80001a4 <main>
  bx lr
 8000762:	4770      	bx	lr
  ldr r0, =_sdata
 8000764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000768:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800076c:	08004c00 	.word	0x08004c00
  ldr r2, =_sbss
 8000770:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000774:	200011d8 	.word	0x200011d8

08000778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000778:	e7fe      	b.n	8000778 <ADC1_2_IRQHandler>
	...

0800077c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <HAL_Init+0x28>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <HAL_Init+0x28>)
 8000786:	f043 0310 	orr.w	r3, r3, #16
 800078a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800078c:	2003      	movs	r0, #3
 800078e:	f000 f92b 	bl	80009e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000792:	200f      	movs	r0, #15
 8000794:	f000 f808 	bl	80007a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000798:	f7ff fe7a 	bl	8000490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40022000 	.word	0x40022000

080007a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b0:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <HAL_InitTick+0x54>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <HAL_InitTick+0x58>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007be:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f935 	bl	8000a36 <HAL_SYSTICK_Config>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00e      	b.n	80007f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b0f      	cmp	r3, #15
 80007da:	d80a      	bhi.n	80007f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007dc:	2200      	movs	r2, #0
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	f000 f90b 	bl	80009fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e8:	4a06      	ldr	r2, [pc, #24]	@ (8000804 <HAL_InitTick+0x5c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e000      	b.n	80007f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000008 	.word	0x20000008
 8000804:	20000004 	.word	0x20000004

08000808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <HAL_IncTick+0x1c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <HAL_IncTick+0x20>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	4a03      	ldr	r2, [pc, #12]	@ (8000828 <HAL_IncTick+0x20>)
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	20000008 	.word	0x20000008
 8000828:	20000334 	.word	0x20000334

0800082c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return uwTick;
 8000830:	4b02      	ldr	r3, [pc, #8]	@ (800083c <HAL_GetTick+0x10>)
 8000832:	681b      	ldr	r3, [r3, #0]
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	20000334 	.word	0x20000334

08000840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000848:	f7ff fff0 	bl	800082c <HAL_GetTick>
 800084c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000858:	d005      	beq.n	8000866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800085a:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <HAL_Delay+0x44>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	461a      	mov	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	4413      	add	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000866:	bf00      	nop
 8000868:	f7ff ffe0 	bl	800082c <HAL_GetTick>
 800086c:	4602      	mov	r2, r0
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	429a      	cmp	r2, r3
 8000876:	d8f7      	bhi.n	8000868 <HAL_Delay+0x28>
  {
  }
}
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008

08000888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000898:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ba:	4a04      	ldr	r2, [pc, #16]	@ (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	60d3      	str	r3, [r2, #12]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d4:	4b04      	ldr	r3, [pc, #16]	@ (80008e8 <__NVIC_GetPriorityGrouping+0x18>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	f003 0307 	and.w	r3, r3, #7
}
 80008de:	4618      	mov	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db0a      	blt.n	8000916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	490c      	ldr	r1, [pc, #48]	@ (8000938 <__NVIC_SetPriority+0x4c>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	0112      	lsls	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	440b      	add	r3, r1
 8000910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000914:	e00a      	b.n	800092c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4908      	ldr	r1, [pc, #32]	@ (800093c <__NVIC_SetPriority+0x50>)
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	f003 030f 	and.w	r3, r3, #15
 8000922:	3b04      	subs	r3, #4
 8000924:	0112      	lsls	r2, r2, #4
 8000926:	b2d2      	uxtb	r2, r2
 8000928:	440b      	add	r3, r1
 800092a:	761a      	strb	r2, [r3, #24]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000e100 	.word	0xe000e100
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000940:	b480      	push	{r7}
 8000942:	b089      	sub	sp, #36	@ 0x24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f1c3 0307 	rsb	r3, r3, #7
 800095a:	2b04      	cmp	r3, #4
 800095c:	bf28      	it	cs
 800095e:	2304      	movcs	r3, #4
 8000960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3304      	adds	r3, #4
 8000966:	2b06      	cmp	r3, #6
 8000968:	d902      	bls.n	8000970 <NVIC_EncodePriority+0x30>
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3b03      	subs	r3, #3
 800096e:	e000      	b.n	8000972 <NVIC_EncodePriority+0x32>
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	f04f 32ff 	mov.w	r2, #4294967295
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43da      	mvns	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	401a      	ands	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000988:	f04f 31ff 	mov.w	r1, #4294967295
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa01 f303 	lsl.w	r3, r1, r3
 8000992:	43d9      	mvns	r1, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	4313      	orrs	r3, r2
         );
}
 800099a:	4618      	mov	r0, r3
 800099c:	3724      	adds	r7, #36	@ 0x24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009b4:	d301      	bcc.n	80009ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00f      	b.n	80009da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ba:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <SysTick_Config+0x40>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c2:	210f      	movs	r1, #15
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f7ff ff90 	bl	80008ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009cc:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <SysTick_Config+0x40>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d2:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <SysTick_Config+0x40>)
 80009d4:	2207      	movs	r2, #7
 80009d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	e000e010 	.word	0xe000e010

080009e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ff49 	bl	8000888 <__NVIC_SetPriorityGrouping>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a10:	f7ff ff5e 	bl	80008d0 <__NVIC_GetPriorityGrouping>
 8000a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	68b9      	ldr	r1, [r7, #8]
 8000a1a:	6978      	ldr	r0, [r7, #20]
 8000a1c:	f7ff ff90 	bl	8000940 <NVIC_EncodePriority>
 8000a20:	4602      	mov	r2, r0
 8000a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff5f 	bl	80008ec <__NVIC_SetPriority>
}
 8000a2e:	bf00      	nop
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff ffb0 	bl	80009a4 <SysTick_Config>
 8000a44:	4603      	mov	r3, r0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b08b      	sub	sp, #44	@ 0x2c
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a62:	e169      	b.n	8000d38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a64:	2201      	movs	r2, #1
 8000a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	69fa      	ldr	r2, [r7, #28]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	f040 8158 	bne.w	8000d32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	4a9a      	ldr	r2, [pc, #616]	@ (8000cf0 <HAL_GPIO_Init+0x2a0>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d05e      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000a8c:	4a98      	ldr	r2, [pc, #608]	@ (8000cf0 <HAL_GPIO_Init+0x2a0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d875      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000a92:	4a98      	ldr	r2, [pc, #608]	@ (8000cf4 <HAL_GPIO_Init+0x2a4>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d058      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000a98:	4a96      	ldr	r2, [pc, #600]	@ (8000cf4 <HAL_GPIO_Init+0x2a4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d86f      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000a9e:	4a96      	ldr	r2, [pc, #600]	@ (8000cf8 <HAL_GPIO_Init+0x2a8>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d052      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000aa4:	4a94      	ldr	r2, [pc, #592]	@ (8000cf8 <HAL_GPIO_Init+0x2a8>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d869      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000aaa:	4a94      	ldr	r2, [pc, #592]	@ (8000cfc <HAL_GPIO_Init+0x2ac>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d04c      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000ab0:	4a92      	ldr	r2, [pc, #584]	@ (8000cfc <HAL_GPIO_Init+0x2ac>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d863      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000ab6:	4a92      	ldr	r2, [pc, #584]	@ (8000d00 <HAL_GPIO_Init+0x2b0>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d046      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000abc:	4a90      	ldr	r2, [pc, #576]	@ (8000d00 <HAL_GPIO_Init+0x2b0>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d85d      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000ac2:	2b12      	cmp	r3, #18
 8000ac4:	d82a      	bhi.n	8000b1c <HAL_GPIO_Init+0xcc>
 8000ac6:	2b12      	cmp	r3, #18
 8000ac8:	d859      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000aca:	a201      	add	r2, pc, #4	@ (adr r2, 8000ad0 <HAL_GPIO_Init+0x80>)
 8000acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad0:	08000b4b 	.word	0x08000b4b
 8000ad4:	08000b25 	.word	0x08000b25
 8000ad8:	08000b37 	.word	0x08000b37
 8000adc:	08000b79 	.word	0x08000b79
 8000ae0:	08000b7f 	.word	0x08000b7f
 8000ae4:	08000b7f 	.word	0x08000b7f
 8000ae8:	08000b7f 	.word	0x08000b7f
 8000aec:	08000b7f 	.word	0x08000b7f
 8000af0:	08000b7f 	.word	0x08000b7f
 8000af4:	08000b7f 	.word	0x08000b7f
 8000af8:	08000b7f 	.word	0x08000b7f
 8000afc:	08000b7f 	.word	0x08000b7f
 8000b00:	08000b7f 	.word	0x08000b7f
 8000b04:	08000b7f 	.word	0x08000b7f
 8000b08:	08000b7f 	.word	0x08000b7f
 8000b0c:	08000b7f 	.word	0x08000b7f
 8000b10:	08000b7f 	.word	0x08000b7f
 8000b14:	08000b2d 	.word	0x08000b2d
 8000b18:	08000b41 	.word	0x08000b41
 8000b1c:	4a79      	ldr	r2, [pc, #484]	@ (8000d04 <HAL_GPIO_Init+0x2b4>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d013      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b22:	e02c      	b.n	8000b7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	623b      	str	r3, [r7, #32]
          break;
 8000b2a:	e029      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	3304      	adds	r3, #4
 8000b32:	623b      	str	r3, [r7, #32]
          break;
 8000b34:	e024      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	623b      	str	r3, [r7, #32]
          break;
 8000b3e:	e01f      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	330c      	adds	r3, #12
 8000b46:	623b      	str	r3, [r7, #32]
          break;
 8000b48:	e01a      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d102      	bne.n	8000b58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b52:	2304      	movs	r3, #4
 8000b54:	623b      	str	r3, [r7, #32]
          break;
 8000b56:	e013      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d105      	bne.n	8000b6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b60:	2308      	movs	r3, #8
 8000b62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	69fa      	ldr	r2, [r7, #28]
 8000b68:	611a      	str	r2, [r3, #16]
          break;
 8000b6a:	e009      	b.n	8000b80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	615a      	str	r2, [r3, #20]
          break;
 8000b76:	e003      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
          break;
 8000b7c:	e000      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          break;
 8000b7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	2bff      	cmp	r3, #255	@ 0xff
 8000b84:	d801      	bhi.n	8000b8a <HAL_GPIO_Init+0x13a>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	e001      	b.n	8000b8e <HAL_GPIO_Init+0x13e>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	2bff      	cmp	r3, #255	@ 0xff
 8000b94:	d802      	bhi.n	8000b9c <HAL_GPIO_Init+0x14c>
 8000b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	e002      	b.n	8000ba2 <HAL_GPIO_Init+0x152>
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9e:	3b08      	subs	r3, #8
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	210f      	movs	r1, #15
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	6a39      	ldr	r1, [r7, #32]
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f000 80b1 	beq.w	8000d32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8000d08 <HAL_GPIO_Init+0x2b8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a4c      	ldr	r2, [pc, #304]	@ (8000d08 <HAL_GPIO_Init+0x2b8>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b4a      	ldr	r3, [pc, #296]	@ (8000d08 <HAL_GPIO_Init+0x2b8>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000be8:	4a48      	ldr	r2, [pc, #288]	@ (8000d0c <HAL_GPIO_Init+0x2bc>)
 8000bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bec:	089b      	lsrs	r3, r3, #2
 8000bee:	3302      	adds	r3, #2
 8000bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	220f      	movs	r2, #15
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a40      	ldr	r2, [pc, #256]	@ (8000d10 <HAL_GPIO_Init+0x2c0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d013      	beq.n	8000c3c <HAL_GPIO_Init+0x1ec>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a3f      	ldr	r2, [pc, #252]	@ (8000d14 <HAL_GPIO_Init+0x2c4>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d00d      	beq.n	8000c38 <HAL_GPIO_Init+0x1e8>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d18 <HAL_GPIO_Init+0x2c8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d007      	beq.n	8000c34 <HAL_GPIO_Init+0x1e4>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a3d      	ldr	r2, [pc, #244]	@ (8000d1c <HAL_GPIO_Init+0x2cc>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d101      	bne.n	8000c30 <HAL_GPIO_Init+0x1e0>
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e006      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c30:	2304      	movs	r3, #4
 8000c32:	e004      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c34:	2302      	movs	r3, #2
 8000c36:	e002      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e000      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c40:	f002 0203 	and.w	r2, r2, #3
 8000c44:	0092      	lsls	r2, r2, #2
 8000c46:	4093      	lsls	r3, r2
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c4e:	492f      	ldr	r1, [pc, #188]	@ (8000d0c <HAL_GPIO_Init+0x2bc>)
 8000c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	3302      	adds	r3, #2
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d006      	beq.n	8000c76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c68:	4b2d      	ldr	r3, [pc, #180]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	492c      	ldr	r1, [pc, #176]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	608b      	str	r3, [r1, #8]
 8000c74:	e006      	b.n	8000c84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c76:	4b2a      	ldr	r3, [pc, #168]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	4928      	ldr	r1, [pc, #160]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d006      	beq.n	8000c9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c90:	4b23      	ldr	r3, [pc, #140]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	4922      	ldr	r1, [pc, #136]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	60cb      	str	r3, [r1, #12]
 8000c9c:	e006      	b.n	8000cac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c9e:	4b20      	ldr	r3, [pc, #128]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ca0:	68da      	ldr	r2, [r3, #12]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	491e      	ldr	r1, [pc, #120]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cb8:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	4918      	ldr	r1, [pc, #96]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	604b      	str	r3, [r1, #4]
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4914      	ldr	r1, [pc, #80]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d021      	beq.n	8000d24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	490e      	ldr	r1, [pc, #56]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	600b      	str	r3, [r1, #0]
 8000cec:	e021      	b.n	8000d32 <HAL_GPIO_Init+0x2e2>
 8000cee:	bf00      	nop
 8000cf0:	10320000 	.word	0x10320000
 8000cf4:	10310000 	.word	0x10310000
 8000cf8:	10220000 	.word	0x10220000
 8000cfc:	10210000 	.word	0x10210000
 8000d00:	10120000 	.word	0x10120000
 8000d04:	10110000 	.word	0x10110000
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010000 	.word	0x40010000
 8000d10:	40010800 	.word	0x40010800
 8000d14:	40010c00 	.word	0x40010c00
 8000d18:	40011000 	.word	0x40011000
 8000d1c:	40011400 	.word	0x40011400
 8000d20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_GPIO_Init+0x304>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	4909      	ldr	r1, [pc, #36]	@ (8000d54 <HAL_GPIO_Init+0x304>)
 8000d2e:	4013      	ands	r3, r2
 8000d30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d34:	3301      	adds	r3, #1
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f47f ae8e 	bne.w	8000a64 <HAL_GPIO_Init+0x14>
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	372c      	adds	r7, #44	@ 0x2c
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40010400 	.word	0x40010400

08000d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	807b      	strh	r3, [r7, #2]
 8000d64:	4613      	mov	r3, r2
 8000d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d68:	787b      	ldrb	r3, [r7, #1]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d6e:	887a      	ldrh	r2, [r7, #2]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d74:	e003      	b.n	8000d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	041a      	lsls	r2, r3, #16
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	611a      	str	r2, [r3, #16]
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d9a:	887a      	ldrh	r2, [r7, #2]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	041a      	lsls	r2, r3, #16
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	43d9      	mvns	r1, r3
 8000da6:	887b      	ldrh	r3, [r7, #2]
 8000da8:	400b      	ands	r3, r1
 8000daa:	431a      	orrs	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	611a      	str	r2, [r3, #16]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
	...

08000dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e272      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 8087 	beq.w	8000eea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ddc:	4b92      	ldr	r3, [pc, #584]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 030c 	and.w	r3, r3, #12
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d00c      	beq.n	8000e02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de8:	4b8f      	ldr	r3, [pc, #572]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 030c 	and.w	r3, r3, #12
 8000df0:	2b08      	cmp	r3, #8
 8000df2:	d112      	bne.n	8000e1a <HAL_RCC_OscConfig+0x5e>
 8000df4:	4b8c      	ldr	r3, [pc, #560]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e00:	d10b      	bne.n	8000e1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e02:	4b89      	ldr	r3, [pc, #548]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d06c      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x12c>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d168      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e24c      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e22:	d106      	bne.n	8000e32 <HAL_RCC_OscConfig+0x76>
 8000e24:	4b80      	ldr	r3, [pc, #512]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a7f      	ldr	r2, [pc, #508]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e02e      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10c      	bne.n	8000e54 <HAL_RCC_OscConfig+0x98>
 8000e3a:	4b7b      	ldr	r3, [pc, #492]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a7a      	ldr	r2, [pc, #488]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	4b78      	ldr	r3, [pc, #480]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a77      	ldr	r2, [pc, #476]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e01d      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e5c:	d10c      	bne.n	8000e78 <HAL_RCC_OscConfig+0xbc>
 8000e5e:	4b72      	ldr	r3, [pc, #456]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a71      	ldr	r2, [pc, #452]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	4b6f      	ldr	r3, [pc, #444]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a6e      	ldr	r2, [pc, #440]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e00b      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e78:	4b6b      	ldr	r3, [pc, #428]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a6a      	ldr	r2, [pc, #424]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b68      	ldr	r3, [pc, #416]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a67      	ldr	r2, [pc, #412]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d013      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e98:	f7ff fcc8 	bl	800082c <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fcc4 	bl	800082c <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b64      	cmp	r3, #100	@ 0x64
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e200      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f0      	beq.n	8000ea0 <HAL_RCC_OscConfig+0xe4>
 8000ebe:	e014      	b.n	8000eea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fcb4 	bl	800082c <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fcb0 	bl	800082c <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	@ 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e1ec      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eda:	4b53      	ldr	r3, [pc, #332]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x10c>
 8000ee6:	e000      	b.n	8000eea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d063      	beq.n	8000fbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00b      	beq.n	8000f1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f02:	4b49      	ldr	r3, [pc, #292]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d11c      	bne.n	8000f48 <HAL_RCC_OscConfig+0x18c>
 8000f0e:	4b46      	ldr	r3, [pc, #280]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d116      	bne.n	8000f48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1a:	4b43      	ldr	r3, [pc, #268]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d005      	beq.n	8000f32 <HAL_RCC_OscConfig+0x176>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d001      	beq.n	8000f32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e1c0      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f32:	4b3d      	ldr	r3, [pc, #244]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4939      	ldr	r1, [pc, #228]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f46:	e03a      	b.n	8000fbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d020      	beq.n	8000f92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f50:	4b36      	ldr	r3, [pc, #216]	@ (800102c <HAL_RCC_OscConfig+0x270>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f56:	f7ff fc69 	bl	800082c <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f5e:	f7ff fc65 	bl	800082c <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e1a1      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f70:	4b2d      	ldr	r3, [pc, #180]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f0      	beq.n	8000f5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4927      	ldr	r1, [pc, #156]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	600b      	str	r3, [r1, #0]
 8000f90:	e015      	b.n	8000fbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f92:	4b26      	ldr	r3, [pc, #152]	@ (800102c <HAL_RCC_OscConfig+0x270>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fc48 	bl	800082c <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fc44 	bl	800082c <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e180      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f0      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d03a      	beq.n	8001040 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d019      	beq.n	8001006 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fd2:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <HAL_RCC_OscConfig+0x274>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd8:	f7ff fc28 	bl	800082c <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe0:	f7ff fc24 	bl	800082c <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e160      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f0      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f000 face 	bl	80015a0 <RCC_Delay>
 8001004:	e01c      	b.n	8001040 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <HAL_RCC_OscConfig+0x274>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100c:	f7ff fc0e 	bl	800082c <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001012:	e00f      	b.n	8001034 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001014:	f7ff fc0a 	bl	800082c <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d908      	bls.n	8001034 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e146      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000
 800102c:	42420000 	.word	0x42420000
 8001030:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001034:	4b92      	ldr	r3, [pc, #584]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1e9      	bne.n	8001014 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80a6 	beq.w	800119a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001052:	4b8b      	ldr	r3, [pc, #556]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10d      	bne.n	800107a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b88      	ldr	r3, [pc, #544]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a87      	ldr	r2, [pc, #540]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b85      	ldr	r3, [pc, #532]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001076:	2301      	movs	r3, #1
 8001078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107a:	4b82      	ldr	r3, [pc, #520]	@ (8001284 <HAL_RCC_OscConfig+0x4c8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001082:	2b00      	cmp	r3, #0
 8001084:	d118      	bne.n	80010b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001086:	4b7f      	ldr	r3, [pc, #508]	@ (8001284 <HAL_RCC_OscConfig+0x4c8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a7e      	ldr	r2, [pc, #504]	@ (8001284 <HAL_RCC_OscConfig+0x4c8>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001092:	f7ff fbcb 	bl	800082c <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800109a:	f7ff fbc7 	bl	800082c <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b64      	cmp	r3, #100	@ 0x64
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e103      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ac:	4b75      	ldr	r3, [pc, #468]	@ (8001284 <HAL_RCC_OscConfig+0x4c8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x312>
 80010c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6213      	str	r3, [r2, #32]
 80010cc:	e02d      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x334>
 80010d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	4a69      	ldr	r2, [pc, #420]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	6213      	str	r3, [r2, #32]
 80010e2:	4b67      	ldr	r3, [pc, #412]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4a66      	ldr	r2, [pc, #408]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	f023 0304 	bic.w	r3, r3, #4
 80010ec:	6213      	str	r3, [r2, #32]
 80010ee:	e01c      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d10c      	bne.n	8001112 <HAL_RCC_OscConfig+0x356>
 80010f8:	4b61      	ldr	r3, [pc, #388]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	4a60      	ldr	r2, [pc, #384]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6213      	str	r3, [r2, #32]
 8001104:	4b5e      	ldr	r3, [pc, #376]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4a5d      	ldr	r2, [pc, #372]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6213      	str	r3, [r2, #32]
 8001110:	e00b      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 8001112:	4b5b      	ldr	r3, [pc, #364]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	4a5a      	ldr	r2, [pc, #360]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	6213      	str	r3, [r2, #32]
 800111e:	4b58      	ldr	r3, [pc, #352]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4a57      	ldr	r2, [pc, #348]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	f023 0304 	bic.w	r3, r3, #4
 8001128:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d015      	beq.n	800115e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff fb7b 	bl	800082c <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001138:	e00a      	b.n	8001150 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113a:	f7ff fb77 	bl	800082c <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001148:	4293      	cmp	r3, r2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e0b1      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001150:	4b4b      	ldr	r3, [pc, #300]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0ee      	beq.n	800113a <HAL_RCC_OscConfig+0x37e>
 800115c:	e014      	b.n	8001188 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115e:	f7ff fb65 	bl	800082c <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001164:	e00a      	b.n	800117c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001166:	f7ff fb61 	bl	800082c <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001174:	4293      	cmp	r3, r2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e09b      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800117c:	4b40      	ldr	r3, [pc, #256]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1ee      	bne.n	8001166 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d105      	bne.n	800119a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800118e:	4b3c      	ldr	r3, [pc, #240]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a3b      	ldr	r2, [pc, #236]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001198:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 8087 	beq.w	80012b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a4:	4b36      	ldr	r3, [pc, #216]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 030c 	and.w	r3, r3, #12
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d061      	beq.n	8001274 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d146      	bne.n	8001246 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b8:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <HAL_RCC_OscConfig+0x4cc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fb35 	bl	800082c <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c6:	f7ff fb31 	bl	800082c <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e06d      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d8:	4b29      	ldr	r3, [pc, #164]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f0      	bne.n	80011c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011ec:	d108      	bne.n	8001200 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011ee:	4b24      	ldr	r3, [pc, #144]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	4921      	ldr	r1, [pc, #132]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001200:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a19      	ldr	r1, [r3, #32]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001210:	430b      	orrs	r3, r1
 8001212:	491b      	ldr	r1, [pc, #108]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	4313      	orrs	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001218:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <HAL_RCC_OscConfig+0x4cc>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fb05 	bl	800082c <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001226:	f7ff fb01 	bl	800082c <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e03d      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001238:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x46a>
 8001244:	e035      	b.n	80012b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <HAL_RCC_OscConfig+0x4cc>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff faee 	bl	800082c <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001254:	f7ff faea 	bl	800082c <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e026      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x498>
 8001272:	e01e      	b.n	80012b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d107      	bne.n	800128c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e019      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
 8001280:	40021000 	.word	0x40021000
 8001284:	40007000 	.word	0x40007000
 8001288:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <HAL_RCC_OscConfig+0x500>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	429a      	cmp	r2, r3
 800129e:	d106      	bne.n	80012ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d001      	beq.n	80012b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021000 	.word	0x40021000

080012c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e0d0      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d910      	bls.n	8001304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e2:	4b67      	ldr	r3, [pc, #412]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 0207 	bic.w	r2, r3, #7
 80012ea:	4965      	ldr	r1, [pc, #404]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f2:	4b63      	ldr	r3, [pc, #396]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d001      	beq.n	8001304 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e0b8      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d020      	beq.n	8001352 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800131c:	4b59      	ldr	r3, [pc, #356]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4a58      	ldr	r2, [pc, #352]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001326:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b00      	cmp	r3, #0
 8001332:	d005      	beq.n	8001340 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001334:	4b53      	ldr	r3, [pc, #332]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a52      	ldr	r2, [pc, #328]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800133e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001340:	4b50      	ldr	r3, [pc, #320]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	494d      	ldr	r1, [pc, #308]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	4313      	orrs	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d040      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d107      	bne.n	8001376 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	4b47      	ldr	r3, [pc, #284]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d115      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e07f      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d107      	bne.n	800138e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137e:	4b41      	ldr	r3, [pc, #260]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e073      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138e:	4b3d      	ldr	r3, [pc, #244]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e06b      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800139e:	4b39      	ldr	r3, [pc, #228]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f023 0203 	bic.w	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	4936      	ldr	r1, [pc, #216]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013b0:	f7ff fa3c 	bl	800082c <HAL_GetTick>
 80013b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b6:	e00a      	b.n	80013ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b8:	f7ff fa38 	bl	800082c <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e053      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 020c 	and.w	r2, r3, #12
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	429a      	cmp	r2, r3
 80013de:	d1eb      	bne.n	80013b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013e0:	4b27      	ldr	r3, [pc, #156]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d210      	bcs.n	8001410 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 0207 	bic.w	r2, r3, #7
 80013f6:	4922      	ldr	r1, [pc, #136]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e032      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800141c:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4916      	ldr	r1, [pc, #88]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	4313      	orrs	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d009      	beq.n	800144e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800143a:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	490e      	ldr	r1, [pc, #56]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	4313      	orrs	r3, r2
 800144c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800144e:	f000 f821 	bl	8001494 <HAL_RCC_GetSysClockFreq>
 8001452:	4602      	mov	r2, r0
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	490a      	ldr	r1, [pc, #40]	@ (8001488 <HAL_RCC_ClockConfig+0x1c8>)
 8001460:	5ccb      	ldrb	r3, [r1, r3]
 8001462:	fa22 f303 	lsr.w	r3, r2, r3
 8001466:	4a09      	ldr	r2, [pc, #36]	@ (800148c <HAL_RCC_ClockConfig+0x1cc>)
 8001468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <HAL_RCC_ClockConfig+0x1d0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f99a 	bl	80007a8 <HAL_InitTick>

  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40022000 	.word	0x40022000
 8001484:	40021000 	.word	0x40021000
 8001488:	08004bcc 	.word	0x08004bcc
 800148c:	20000000 	.word	0x20000000
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x94>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d002      	beq.n	80014c4 <HAL_RCC_GetSysClockFreq+0x30>
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d003      	beq.n	80014ca <HAL_RCC_GetSysClockFreq+0x36>
 80014c2:	e027      	b.n	8001514 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_RCC_GetSysClockFreq+0x98>)
 80014c6:	613b      	str	r3, [r7, #16]
      break;
 80014c8:	e027      	b.n	800151a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	0c9b      	lsrs	r3, r3, #18
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	4a17      	ldr	r2, [pc, #92]	@ (8001530 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014d4:	5cd3      	ldrb	r3, [r2, r3]
 80014d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d010      	beq.n	8001504 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x94>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	0c5b      	lsrs	r3, r3, #17
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	4a11      	ldr	r2, [pc, #68]	@ (8001534 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014ee:	5cd3      	ldrb	r3, [r2, r3]
 80014f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a0d      	ldr	r2, [pc, #52]	@ (800152c <HAL_RCC_GetSysClockFreq+0x98>)
 80014f6:	fb03 f202 	mul.w	r2, r3, r2
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	e004      	b.n	800150e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a0c      	ldr	r2, [pc, #48]	@ (8001538 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001508:	fb02 f303 	mul.w	r3, r2, r3
 800150c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	613b      	str	r3, [r7, #16]
      break;
 8001512:	e002      	b.n	800151a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <HAL_RCC_GetSysClockFreq+0x98>)
 8001516:	613b      	str	r3, [r7, #16]
      break;
 8001518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800151a:	693b      	ldr	r3, [r7, #16]
}
 800151c:	4618      	mov	r0, r3
 800151e:	371c      	adds	r7, #28
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	007a1200 	.word	0x007a1200
 8001530:	08004be4 	.word	0x08004be4
 8001534:	08004bf4 	.word	0x08004bf4
 8001538:	003d0900 	.word	0x003d0900

0800153c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001540:	4b02      	ldr	r3, [pc, #8]	@ (800154c <HAL_RCC_GetHCLKFreq+0x10>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	20000000 	.word	0x20000000

08001550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001554:	f7ff fff2 	bl	800153c <HAL_RCC_GetHCLKFreq>
 8001558:	4602      	mov	r2, r0
 800155a:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	4903      	ldr	r1, [pc, #12]	@ (8001574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001566:	5ccb      	ldrb	r3, [r1, r3]
 8001568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800156c:	4618      	mov	r0, r3
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40021000 	.word	0x40021000
 8001574:	08004bdc 	.word	0x08004bdc

08001578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800157c:	f7ff ffde 	bl	800153c <HAL_RCC_GetHCLKFreq>
 8001580:	4602      	mov	r2, r0
 8001582:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	0adb      	lsrs	r3, r3, #11
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	4903      	ldr	r1, [pc, #12]	@ (800159c <HAL_RCC_GetPCLK2Freq+0x24>)
 800158e:	5ccb      	ldrb	r3, [r1, r3]
 8001590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001594:	4618      	mov	r0, r3
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021000 	.word	0x40021000
 800159c:	08004bdc 	.word	0x08004bdc

080015a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015a8:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <RCC_Delay+0x34>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <RCC_Delay+0x38>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0a5b      	lsrs	r3, r3, #9
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015bc:	bf00      	nop
  }
  while (Delay --);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1e5a      	subs	r2, r3, #1
 80015c2:	60fa      	str	r2, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f9      	bne.n	80015bc <RCC_Delay+0x1c>
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	20000000 	.word	0x20000000
 80015d8:	10624dd3 	.word	0x10624dd3

080015dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e042      	b.n	8001674 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d106      	bne.n	8001608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7fe ff7c 	bl	8000500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2224      	movs	r2, #36	@ 0x24
 800160c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800161e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f971 	bl	8001908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	695a      	ldr	r2, [r3, #20]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2220      	movs	r2, #32
 8001660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2220      	movs	r2, #32
 8001668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	@ 0x28
 8001680:	af02      	add	r7, sp, #8
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	4613      	mov	r3, r2
 800168a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b20      	cmp	r3, #32
 800169a:	d175      	bne.n	8001788 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <HAL_UART_Transmit+0x2c>
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e06e      	b.n	800178a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2221      	movs	r2, #33	@ 0x21
 80016b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80016ba:	f7ff f8b7 	bl	800082c <HAL_GetTick>
 80016be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	88fa      	ldrh	r2, [r7, #6]
 80016c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	88fa      	ldrh	r2, [r7, #6]
 80016ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016d4:	d108      	bne.n	80016e8 <HAL_UART_Transmit+0x6c>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d104      	bne.n	80016e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	e003      	b.n	80016f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80016f0:	e02e      	b.n	8001750 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2200      	movs	r2, #0
 80016fa:	2180      	movs	r1, #128	@ 0x80
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 f848 	bl	8001792 <UART_WaitOnFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2220      	movs	r2, #32
 800170c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e03a      	b.n	800178a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10b      	bne.n	8001732 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001728:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	3302      	adds	r3, #2
 800172e:	61bb      	str	r3, [r7, #24]
 8001730:	e007      	b.n	8001742 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	3301      	adds	r3, #1
 8001740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001746:	b29b      	uxth	r3, r3
 8001748:	3b01      	subs	r3, #1
 800174a:	b29a      	uxth	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001754:	b29b      	uxth	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1cb      	bne.n	80016f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2200      	movs	r2, #0
 8001762:	2140      	movs	r1, #64	@ 0x40
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 f814 	bl	8001792 <UART_WaitOnFlagUntilTimeout>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2220      	movs	r2, #32
 8001774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e006      	b.n	800178a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2220      	movs	r2, #32
 8001780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	e000      	b.n	800178a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001788:	2302      	movs	r3, #2
  }
}
 800178a:	4618      	mov	r0, r3
 800178c:	3720      	adds	r7, #32
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	4613      	mov	r3, r2
 80017a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017a2:	e03b      	b.n	800181c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017aa:	d037      	beq.n	800181c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ac:	f7ff f83e 	bl	800082c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	6a3a      	ldr	r2, [r7, #32]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d302      	bcc.n	80017c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e03a      	b.n	800183c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d023      	beq.n	800181c <UART_WaitOnFlagUntilTimeout+0x8a>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b80      	cmp	r3, #128	@ 0x80
 80017d8:	d020      	beq.n	800181c <UART_WaitOnFlagUntilTimeout+0x8a>
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2b40      	cmp	r3, #64	@ 0x40
 80017de:	d01d      	beq.n	800181c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d116      	bne.n	800181c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 f81d 	bl	8001844 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2208      	movs	r2, #8
 800180e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e00f      	b.n	800183c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	4013      	ands	r3, r2
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	429a      	cmp	r2, r3
 800182a:	bf0c      	ite	eq
 800182c:	2301      	moveq	r3, #1
 800182e:	2300      	movne	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	429a      	cmp	r2, r3
 8001838:	d0b4      	beq.n	80017a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001844:	b480      	push	{r7}
 8001846:	b095      	sub	sp, #84	@ 0x54
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	330c      	adds	r3, #12
 8001852:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001856:	e853 3f00 	ldrex	r3, [r3]
 800185a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800185c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800185e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	330c      	adds	r3, #12
 800186a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800186c:	643a      	str	r2, [r7, #64]	@ 0x40
 800186e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001870:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001872:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001874:	e841 2300 	strex	r3, r2, [r1]
 8001878:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800187a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1e5      	bne.n	800184c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3314      	adds	r3, #20
 8001886:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	e853 3f00 	ldrex	r3, [r3]
 800188e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	3314      	adds	r3, #20
 800189e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018a8:	e841 2300 	strex	r3, r2, [r1]
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1e5      	bne.n	8001880 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d119      	bne.n	80018f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	330c      	adds	r3, #12
 80018c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	e853 3f00 	ldrex	r3, [r3]
 80018ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f023 0310 	bic.w	r3, r3, #16
 80018d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	330c      	adds	r3, #12
 80018da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80018dc:	61ba      	str	r2, [r7, #24]
 80018de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018e0:	6979      	ldr	r1, [r7, #20]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	e841 2300 	strex	r3, r2, [r1]
 80018e8:	613b      	str	r3, [r7, #16]
   return(result);
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1e5      	bne.n	80018bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2220      	movs	r2, #32
 80018f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80018fe:	bf00      	nop
 8001900:	3754      	adds	r7, #84	@ 0x54
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	4313      	orrs	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001942:	f023 030c 	bic.w	r3, r3, #12
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	68b9      	ldr	r1, [r7, #8]
 800194c:	430b      	orrs	r3, r1
 800194e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699a      	ldr	r2, [r3, #24]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a2c      	ldr	r2, [pc, #176]	@ (8001a1c <UART_SetConfig+0x114>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d103      	bne.n	8001978 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001970:	f7ff fe02 	bl	8001578 <HAL_RCC_GetPCLK2Freq>
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	e002      	b.n	800197e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001978:	f7ff fdea 	bl	8001550 <HAL_RCC_GetPCLK1Freq>
 800197c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	009a      	lsls	r2, r3, #2
 8001988:	441a      	add	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	fbb2 f3f3 	udiv	r3, r2, r3
 8001994:	4a22      	ldr	r2, [pc, #136]	@ (8001a20 <UART_SetConfig+0x118>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	0119      	lsls	r1, r3, #4
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	009a      	lsls	r2, r3, #2
 80019a8:	441a      	add	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80019b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <UART_SetConfig+0x118>)
 80019b6:	fba3 0302 	umull	r0, r3, r3, r2
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	2064      	movs	r0, #100	@ 0x64
 80019be:	fb00 f303 	mul.w	r3, r0, r3
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	3332      	adds	r3, #50	@ 0x32
 80019c8:	4a15      	ldr	r2, [pc, #84]	@ (8001a20 <UART_SetConfig+0x118>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019d4:	4419      	add	r1, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	009a      	lsls	r2, r3, #2
 80019e0:	441a      	add	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <UART_SetConfig+0x118>)
 80019ee:	fba3 0302 	umull	r0, r3, r3, r2
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	2064      	movs	r0, #100	@ 0x64
 80019f6:	fb00 f303 	mul.w	r3, r0, r3
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	3332      	adds	r3, #50	@ 0x32
 8001a00:	4a07      	ldr	r2, [pc, #28]	@ (8001a20 <UART_SetConfig+0x118>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	f003 020f 	and.w	r2, r3, #15
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	440a      	add	r2, r1
 8001a12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40013800 	.word	0x40013800
 8001a20:	51eb851f 	.word	0x51eb851f

08001a24 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001a32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a36:	2b84      	cmp	r3, #132	@ 0x84
 8001a38:	d005      	beq.n	8001a46 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001a3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4413      	add	r3, r2
 8001a42:	3303      	adds	r3, #3
 8001a44:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a58:	f3ef 8305 	mrs	r3, IPSR
 8001a5c:	607b      	str	r3, [r7, #4]
  return(result);
 8001a5e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf14      	ite	ne
 8001a64:	2301      	movne	r3, #1
 8001a66:	2300      	moveq	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001a78:	f001 f924 	bl	8002cc4 <vTaskStartScheduler>
  
  return osOK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001a82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a84:	b089      	sub	sp, #36	@ 0x24
 8001a86:	af04      	add	r7, sp, #16
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d020      	beq.n	8001ad6 <osThreadCreate+0x54>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01c      	beq.n	8001ad6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685c      	ldr	r4, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691e      	ldr	r6, [r3, #16]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ffb8 	bl	8001a24 <makeFreeRtosPriority>
 8001ab4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001abe:	9202      	str	r2, [sp, #8]
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	9100      	str	r1, [sp, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	4632      	mov	r2, r6
 8001ac8:	4629      	mov	r1, r5
 8001aca:	4620      	mov	r0, r4
 8001acc:	f000 ff2d 	bl	800292a <xTaskCreateStatic>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	e01c      	b.n	8001b10 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685c      	ldr	r4, [r3, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ae2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff9a 	bl	8001a24 <makeFreeRtosPriority>
 8001af0:	4602      	mov	r2, r0
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	9200      	str	r2, [sp, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	4632      	mov	r2, r6
 8001afe:	4629      	mov	r1, r5
 8001b00:	4620      	mov	r0, r4
 8001b02:	f000 ff72 	bl	80029ea <xTaskCreate>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d001      	beq.n	8001b10 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e000      	b.n	8001b12 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001b10:	68fb      	ldr	r3, [r7, #12]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b1a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <osDelay+0x16>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	e000      	b.n	8001b32 <osDelay+0x18>
 8001b30:	2301      	movs	r3, #1
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 f890 	bl	8002c58 <vTaskDelay>
  
  return osOK;
 8001b38:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af02      	add	r7, sp, #8
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00f      	beq.n	8001b74 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d10a      	bne.n	8001b70 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2203      	movs	r2, #3
 8001b60:	9200      	str	r2, [sp, #0]
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	2001      	movs	r0, #1
 8001b68:	f000 f9bc 	bl	8001ee4 <xQueueGenericCreateStatic>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	e016      	b.n	8001b9e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e014      	b.n	8001b9e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d110      	bne.n	8001b9c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2001      	movs	r0, #1
 8001b80:	f000 fa2d 	bl	8001fde <xQueueGenericCreate>
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <osSemaphoreCreate+0x56>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 fa7e 	bl	8002094 <xQueueGenericSend>
      return sema;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	e000      	b.n	8001b9e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8001b9c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	e03a      	b.n	8001c36 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bca:	d103      	bne.n	8001bd4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	e009      	b.n	8001be8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d006      	beq.n	8001be8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <osSemaphoreWait+0x40>
      ticks = 1;
 8001be4:	2301      	movs	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8001be8:	f7ff ff33 	bl	8001a52 <inHandlerMode>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d017      	beq.n	8001c22 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001bf2:	f107 0308 	add.w	r3, r7, #8
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fcec 	bl	80025d8 <xQueueReceiveFromISR>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d001      	beq.n	8001c0a <osSemaphoreWait+0x62>
      return osErrorOS;
 8001c06:	23ff      	movs	r3, #255	@ 0xff
 8001c08:	e015      	b.n	8001c36 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d011      	beq.n	8001c34 <osSemaphoreWait+0x8c>
 8001c10:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <osSemaphoreWait+0x98>)
 8001c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	f3bf 8f4f 	dsb	sy
 8001c1c:	f3bf 8f6f 	isb	sy
 8001c20:	e008      	b.n	8001c34 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001c22:	68f9      	ldr	r1, [r7, #12]
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fbc7 	bl	80023b8 <xQueueSemaphoreTake>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d001      	beq.n	8001c34 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8001c30:	23ff      	movs	r3, #255	@ 0xff
 8001c32:	e000      	b.n	8001c36 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	e000ed04 	.word	0xe000ed04

08001c44 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8001c54:	f7ff fefd 	bl	8001a52 <inHandlerMode>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d016      	beq.n	8001c8c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	4619      	mov	r1, r3
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 fb17 	bl	8002298 <xQueueGiveFromISR>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d001      	beq.n	8001c74 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8001c70:	23ff      	movs	r3, #255	@ 0xff
 8001c72:	e017      	b.n	8001ca4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d013      	beq.n	8001ca2 <osSemaphoreRelease+0x5e>
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <osSemaphoreRelease+0x68>)
 8001c7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	f3bf 8f4f 	dsb	sy
 8001c86:	f3bf 8f6f 	isb	sy
 8001c8a:	e00a      	b.n	8001ca2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f9fe 	bl	8002094 <xQueueGenericSend>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d001      	beq.n	8001ca2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8001c9e:	23ff      	movs	r3, #255	@ 0xff
 8001ca0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	e000ed04 	.word	0xe000ed04

08001cb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f103 0208 	add.w	r2, r3, #8
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f103 0208 	add.w	r2, r3, #8
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f103 0208 	add.w	r2, r3, #8
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d06:	b480      	push	{r7}
 8001d08:	b085      	sub	sp, #20
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	601a      	str	r2, [r3, #0]
}
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d62:	d103      	bne.n	8001d6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	e00c      	b.n	8001d86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3308      	adds	r3, #8
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	e002      	b.n	8001d7a <vListInsert+0x2e>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d2f6      	bcs.n	8001d74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	601a      	str	r2, [r3, #0]
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6892      	ldr	r2, [r2, #8]
 8001dd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6852      	ldr	r2, [r2, #4]
 8001ddc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d103      	bne.n	8001df0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	1e5a      	subs	r2, r3, #1
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
	...

08001e10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10b      	bne.n	8001e3c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e28:	f383 8811 	msr	BASEPRI, r3
 8001e2c:	f3bf 8f6f 	isb	sy
 8001e30:	f3bf 8f4f 	dsb	sy
 8001e34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001e3c:	f001 fe66 	bl	8003b0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e48:	68f9      	ldr	r1, [r7, #12]
 8001e4a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	441a      	add	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	68f9      	ldr	r1, [r7, #12]
 8001e70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001e72:	fb01 f303 	mul.w	r3, r1, r3
 8001e76:	441a      	add	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	22ff      	movs	r2, #255	@ 0xff
 8001e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	22ff      	movs	r2, #255	@ 0xff
 8001e88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d114      	bne.n	8001ebc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d01a      	beq.n	8001ed0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3310      	adds	r3, #16
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f001 f95a 	bl	8003158 <xTaskRemoveFromEventList>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d012      	beq.n	8001ed0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <xQueueGenericReset+0xd0>)
 8001eac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	f3bf 8f4f 	dsb	sy
 8001eb6:	f3bf 8f6f 	isb	sy
 8001eba:	e009      	b.n	8001ed0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	3310      	adds	r3, #16
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fef5 	bl	8001cb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3324      	adds	r3, #36	@ 0x24
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fef0 	bl	8001cb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001ed0:	f001 fe4c 	bl	8003b6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001ed4:	2301      	movs	r3, #1
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	e000ed04 	.word	0xe000ed04

08001ee4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08e      	sub	sp, #56	@ 0x38
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10b      	bne.n	8001f10 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001efc:	f383 8811 	msr	BASEPRI, r3
 8001f00:	f3bf 8f6f 	isb	sy
 8001f04:	f3bf 8f4f 	dsb	sy
 8001f08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10b      	bne.n	8001f2e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f1a:	f383 8811 	msr	BASEPRI, r3
 8001f1e:	f3bf 8f6f 	isb	sy
 8001f22:	f3bf 8f4f 	dsb	sy
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	e7fd      	b.n	8001f2a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <xQueueGenericCreateStatic+0x56>
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <xQueueGenericCreateStatic+0x5a>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <xQueueGenericCreateStatic+0x5c>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10b      	bne.n	8001f5c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f48:	f383 8811 	msr	BASEPRI, r3
 8001f4c:	f3bf 8f6f 	isb	sy
 8001f50:	f3bf 8f4f 	dsb	sy
 8001f54:	623b      	str	r3, [r7, #32]
}
 8001f56:	bf00      	nop
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d102      	bne.n	8001f68 <xQueueGenericCreateStatic+0x84>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <xQueueGenericCreateStatic+0x88>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <xQueueGenericCreateStatic+0x8a>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10b      	bne.n	8001f8a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f76:	f383 8811 	msr	BASEPRI, r3
 8001f7a:	f3bf 8f6f 	isb	sy
 8001f7e:	f3bf 8f4f 	dsb	sy
 8001f82:	61fb      	str	r3, [r7, #28]
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	e7fd      	b.n	8001f86 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001f8a:	2348      	movs	r3, #72	@ 0x48
 8001f8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b48      	cmp	r3, #72	@ 0x48
 8001f92:	d00b      	beq.n	8001fac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f98:	f383 8811 	msr	BASEPRI, r3
 8001f9c:	f3bf 8f6f 	isb	sy
 8001fa0:	f3bf 8f4f 	dsb	sy
 8001fa4:	61bb      	str	r3, [r7, #24]
}
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001fac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00d      	beq.n	8001fd4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001fc0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f840 	bl	8002054 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3730      	adds	r7, #48	@ 0x30
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b08a      	sub	sp, #40	@ 0x28
 8001fe2:	af02      	add	r7, sp, #8
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10b      	bne.n	800200a <xQueueGenericCreate+0x2c>
	__asm volatile
 8001ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ff6:	f383 8811 	msr	BASEPRI, r3
 8001ffa:	f3bf 8f6f 	isb	sy
 8001ffe:	f3bf 8f4f 	dsb	sy
 8002002:	613b      	str	r3, [r7, #16]
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	e7fd      	b.n	8002006 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	3348      	adds	r3, #72	@ 0x48
 8002018:	4618      	mov	r0, r3
 800201a:	f001 fe79 	bl	8003d10 <pvPortMalloc>
 800201e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d011      	beq.n	800204a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	3348      	adds	r3, #72	@ 0x48
 800202e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002038:	79fa      	ldrb	r2, [r7, #7]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	4613      	mov	r3, r2
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 f805 	bl	8002054 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800204a:	69bb      	ldr	r3, [r7, #24]
	}
 800204c:	4618      	mov	r0, r3
 800204e:	3720      	adds	r7, #32
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d103      	bne.n	8002070 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	e002      	b.n	8002076 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002082:	2101      	movs	r1, #1
 8002084:	69b8      	ldr	r0, [r7, #24]
 8002086:	f7ff fec3 	bl	8001e10 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08e      	sub	sp, #56	@ 0x38
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80020a2:	2300      	movs	r3, #0
 80020a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80020aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10b      	bne.n	80020c8 <xQueueGenericSend+0x34>
	__asm volatile
 80020b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020b4:	f383 8811 	msr	BASEPRI, r3
 80020b8:	f3bf 8f6f 	isb	sy
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80020c2:	bf00      	nop
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d103      	bne.n	80020d6 <xQueueGenericSend+0x42>
 80020ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <xQueueGenericSend+0x46>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <xQueueGenericSend+0x48>
 80020da:	2300      	movs	r3, #0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10b      	bne.n	80020f8 <xQueueGenericSend+0x64>
	__asm volatile
 80020e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020e4:	f383 8811 	msr	BASEPRI, r3
 80020e8:	f3bf 8f6f 	isb	sy
 80020ec:	f3bf 8f4f 	dsb	sy
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d103      	bne.n	8002106 <xQueueGenericSend+0x72>
 80020fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <xQueueGenericSend+0x76>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <xQueueGenericSend+0x78>
 800210a:	2300      	movs	r3, #0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10b      	bne.n	8002128 <xQueueGenericSend+0x94>
	__asm volatile
 8002110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002114:	f383 8811 	msr	BASEPRI, r3
 8002118:	f3bf 8f6f 	isb	sy
 800211c:	f3bf 8f4f 	dsb	sy
 8002120:	623b      	str	r3, [r7, #32]
}
 8002122:	bf00      	nop
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002128:	f001 f9d6 	bl	80034d8 <xTaskGetSchedulerState>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d102      	bne.n	8002138 <xQueueGenericSend+0xa4>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <xQueueGenericSend+0xa8>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <xQueueGenericSend+0xaa>
 800213c:	2300      	movs	r3, #0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10b      	bne.n	800215a <xQueueGenericSend+0xc6>
	__asm volatile
 8002142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002146:	f383 8811 	msr	BASEPRI, r3
 800214a:	f3bf 8f6f 	isb	sy
 800214e:	f3bf 8f4f 	dsb	sy
 8002152:	61fb      	str	r3, [r7, #28]
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	e7fd      	b.n	8002156 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800215a:	f001 fcd7 	bl	8003b0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800215e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002160:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002166:	429a      	cmp	r2, r3
 8002168:	d302      	bcc.n	8002170 <xQueueGenericSend+0xdc>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d129      	bne.n	80021c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002176:	f000 fac8 	bl	800270a <prvCopyDataToQueue>
 800217a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800217c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	2b00      	cmp	r3, #0
 8002182:	d010      	beq.n	80021a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002186:	3324      	adds	r3, #36	@ 0x24
 8002188:	4618      	mov	r0, r3
 800218a:	f000 ffe5 	bl	8003158 <xTaskRemoveFromEventList>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d013      	beq.n	80021bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002194:	4b3f      	ldr	r3, [pc, #252]	@ (8002294 <xQueueGenericSend+0x200>)
 8002196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	f3bf 8f6f 	isb	sy
 80021a4:	e00a      	b.n	80021bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80021a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d007      	beq.n	80021bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80021ac:	4b39      	ldr	r3, [pc, #228]	@ (8002294 <xQueueGenericSend+0x200>)
 80021ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	f3bf 8f4f 	dsb	sy
 80021b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80021bc:	f001 fcd6 	bl	8003b6c <vPortExitCritical>
				return pdPASS;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e063      	b.n	800228c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d103      	bne.n	80021d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80021ca:	f001 fccf 	bl	8003b6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e05c      	b.n	800228c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80021d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d106      	bne.n	80021e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4618      	mov	r0, r3
 80021de:	f001 f81f 	bl	8003220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80021e2:	2301      	movs	r3, #1
 80021e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80021e6:	f001 fcc1 	bl	8003b6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80021ea:	f000 fdcd 	bl	8002d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021ee:	f001 fc8d 	bl	8003b0c <vPortEnterCritical>
 80021f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80021f8:	b25b      	sxtb	r3, r3
 80021fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fe:	d103      	bne.n	8002208 <xQueueGenericSend+0x174>
 8002200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800220a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800220e:	b25b      	sxtb	r3, r3
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d103      	bne.n	800221e <xQueueGenericSend+0x18a>
 8002216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800221e:	f001 fca5 	bl	8003b6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002222:	1d3a      	adds	r2, r7, #4
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f001 f80e 	bl	800324c <xTaskCheckForTimeOut>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d124      	bne.n	8002280 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002236:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002238:	f000 fb5f 	bl	80028fa <prvIsQueueFull>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d018      	beq.n	8002274 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002244:	3310      	adds	r3, #16
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f000 ff5e 	bl	800310c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002252:	f000 faea 	bl	800282a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002256:	f000 fda5 	bl	8002da4 <xTaskResumeAll>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	f47f af7c 	bne.w	800215a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002262:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <xQueueGenericSend+0x200>)
 8002264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	f3bf 8f4f 	dsb	sy
 800226e:	f3bf 8f6f 	isb	sy
 8002272:	e772      	b.n	800215a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002274:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002276:	f000 fad8 	bl	800282a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800227a:	f000 fd93 	bl	8002da4 <xTaskResumeAll>
 800227e:	e76c      	b.n	800215a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002280:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002282:	f000 fad2 	bl	800282a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002286:	f000 fd8d 	bl	8002da4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800228a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800228c:	4618      	mov	r0, r3
 800228e:	3738      	adds	r7, #56	@ 0x38
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	e000ed04 	.word	0xe000ed04

08002298 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08e      	sub	sp, #56	@ 0x38
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80022a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10b      	bne.n	80022c4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80022ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	623b      	str	r3, [r7, #32]
}
 80022be:	bf00      	nop
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80022c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00b      	beq.n	80022e4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80022cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022d0:	f383 8811 	msr	BASEPRI, r3
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	61fb      	str	r3, [r7, #28]
}
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80022e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d103      	bne.n	80022f4 <xQueueGiveFromISR+0x5c>
 80022ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <xQueueGiveFromISR+0x60>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <xQueueGiveFromISR+0x62>
 80022f8:	2300      	movs	r3, #0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10b      	bne.n	8002316 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80022fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002302:	f383 8811 	msr	BASEPRI, r3
 8002306:	f3bf 8f6f 	isb	sy
 800230a:	f3bf 8f4f 	dsb	sy
 800230e:	61bb      	str	r3, [r7, #24]
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	e7fd      	b.n	8002312 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002316:	f001 fcbb 	bl	8003c90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800231a:	f3ef 8211 	mrs	r2, BASEPRI
 800231e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002322:	f383 8811 	msr	BASEPRI, r3
 8002326:	f3bf 8f6f 	isb	sy
 800232a:	f3bf 8f4f 	dsb	sy
 800232e:	617a      	str	r2, [r7, #20]
 8002330:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002332:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002334:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800233c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002342:	429a      	cmp	r2, r3
 8002344:	d22b      	bcs.n	800239e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002348:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800234c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002356:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002358:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d112      	bne.n	8002388 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	2b00      	cmp	r3, #0
 8002368:	d016      	beq.n	8002398 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800236a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236c:	3324      	adds	r3, #36	@ 0x24
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fef2 	bl	8003158 <xTaskRemoveFromEventList>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00e      	beq.n	8002398 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00b      	beq.n	8002398 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	e007      	b.n	8002398 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002388:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800238c:	3301      	adds	r3, #1
 800238e:	b2db      	uxtb	r3, r3
 8002390:	b25a      	sxtb	r2, r3
 8002392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002398:	2301      	movs	r3, #1
 800239a:	637b      	str	r3, [r7, #52]	@ 0x34
 800239c:	e001      	b.n	80023a2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80023a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80023ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80023ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3738      	adds	r7, #56	@ 0x38
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08e      	sub	sp, #56	@ 0x38
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80023ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10b      	bne.n	80023ec <xQueueSemaphoreTake+0x34>
	__asm volatile
 80023d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023d8:	f383 8811 	msr	BASEPRI, r3
 80023dc:	f3bf 8f6f 	isb	sy
 80023e0:	f3bf 8f4f 	dsb	sy
 80023e4:	623b      	str	r3, [r7, #32]
}
 80023e6:	bf00      	nop
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80023ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00b      	beq.n	800240c <xQueueSemaphoreTake+0x54>
	__asm volatile
 80023f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	61fb      	str	r3, [r7, #28]
}
 8002406:	bf00      	nop
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800240c:	f001 f864 	bl	80034d8 <xTaskGetSchedulerState>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d102      	bne.n	800241c <xQueueSemaphoreTake+0x64>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <xQueueSemaphoreTake+0x68>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <xQueueSemaphoreTake+0x6a>
 8002420:	2300      	movs	r3, #0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10b      	bne.n	800243e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800242a:	f383 8811 	msr	BASEPRI, r3
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f3bf 8f4f 	dsb	sy
 8002436:	61bb      	str	r3, [r7, #24]
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	e7fd      	b.n	800243a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800243e:	f001 fb65 	bl	8003b0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002446:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244a:	2b00      	cmp	r3, #0
 800244c:	d024      	beq.n	8002498 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800244e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002450:	1e5a      	subs	r2, r3, #1
 8002452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002454:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d104      	bne.n	8002468 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800245e:	f001 f9e7 	bl	8003830 <pvTaskIncrementMutexHeldCount>
 8002462:	4602      	mov	r2, r0
 8002464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002466:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00f      	beq.n	8002490 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002472:	3310      	adds	r3, #16
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fe6f 	bl	8003158 <xTaskRemoveFromEventList>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002480:	4b54      	ldr	r3, [pc, #336]	@ (80025d4 <xQueueSemaphoreTake+0x21c>)
 8002482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002490:	f001 fb6c 	bl	8003b6c <vPortExitCritical>
				return pdPASS;
 8002494:	2301      	movs	r3, #1
 8002496:	e098      	b.n	80025ca <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d112      	bne.n	80024c4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800249e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00b      	beq.n	80024bc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024a8:	f383 8811 	msr	BASEPRI, r3
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	617b      	str	r3, [r7, #20]
}
 80024b6:	bf00      	nop
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80024bc:	f001 fb56 	bl	8003b6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80024c0:	2300      	movs	r3, #0
 80024c2:	e082      	b.n	80025ca <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024ca:	f107 030c 	add.w	r3, r7, #12
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fea6 	bl	8003220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024d4:	2301      	movs	r3, #1
 80024d6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024d8:	f001 fb48 	bl	8003b6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024dc:	f000 fc54 	bl	8002d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024e0:	f001 fb14 	bl	8003b0c <vPortEnterCritical>
 80024e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80024ea:	b25b      	sxtb	r3, r3
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d103      	bne.n	80024fa <xQueueSemaphoreTake+0x142>
 80024f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002500:	b25b      	sxtb	r3, r3
 8002502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002506:	d103      	bne.n	8002510 <xQueueSemaphoreTake+0x158>
 8002508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002510:	f001 fb2c 	bl	8003b6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002514:	463a      	mov	r2, r7
 8002516:	f107 030c 	add.w	r3, r7, #12
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f000 fe95 	bl	800324c <xTaskCheckForTimeOut>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d132      	bne.n	800258e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002528:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800252a:	f000 f9d0 	bl	80028ce <prvIsQueueEmpty>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d026      	beq.n	8002582 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d109      	bne.n	8002550 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800253c:	f001 fae6 	bl	8003b0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 ffe5 	bl	8003514 <xTaskPriorityInherit>
 800254a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800254c:	f001 fb0e 	bl	8003b6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002552:	3324      	adds	r3, #36	@ 0x24
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fdd7 	bl	800310c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800255e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002560:	f000 f963 	bl	800282a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002564:	f000 fc1e 	bl	8002da4 <xTaskResumeAll>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	f47f af67 	bne.w	800243e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002570:	4b18      	ldr	r3, [pc, #96]	@ (80025d4 <xQueueSemaphoreTake+0x21c>)
 8002572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f3bf 8f4f 	dsb	sy
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	e75d      	b.n	800243e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002582:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002584:	f000 f951 	bl	800282a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002588:	f000 fc0c 	bl	8002da4 <xTaskResumeAll>
 800258c:	e757      	b.n	800243e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800258e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002590:	f000 f94b 	bl	800282a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002594:	f000 fc06 	bl	8002da4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002598:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800259a:	f000 f998 	bl	80028ce <prvIsQueueEmpty>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f43f af4c 	beq.w	800243e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80025a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00d      	beq.n	80025c8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80025ac:	f001 faae 	bl	8003b0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80025b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80025b2:	f000 f893 	bl	80026dc <prvGetDisinheritPriorityAfterTimeout>
 80025b6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80025b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025be:	4618      	mov	r0, r3
 80025c0:	f001 f8a6 	bl	8003710 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80025c4:	f001 fad2 	bl	8003b6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80025c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3738      	adds	r7, #56	@ 0x38
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	e000ed04 	.word	0xe000ed04

080025d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08e      	sub	sp, #56	@ 0x38
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80025e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10b      	bne.n	8002606 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80025ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025f2:	f383 8811 	msr	BASEPRI, r3
 80025f6:	f3bf 8f6f 	isb	sy
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	623b      	str	r3, [r7, #32]
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	e7fd      	b.n	8002602 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d103      	bne.n	8002614 <xQueueReceiveFromISR+0x3c>
 800260c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <xQueueReceiveFromISR+0x40>
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <xQueueReceiveFromISR+0x42>
 8002618:	2300      	movs	r3, #0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10b      	bne.n	8002636 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800261e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002622:	f383 8811 	msr	BASEPRI, r3
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	61fb      	str	r3, [r7, #28]
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	e7fd      	b.n	8002632 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002636:	f001 fb2b 	bl	8003c90 <vPortValidateInterruptPriority>
	__asm volatile
 800263a:	f3ef 8211 	mrs	r2, BASEPRI
 800263e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002642:	f383 8811 	msr	BASEPRI, r3
 8002646:	f3bf 8f6f 	isb	sy
 800264a:	f3bf 8f4f 	dsb	sy
 800264e:	61ba      	str	r2, [r7, #24]
 8002650:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002652:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002654:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800265a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800265c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265e:	2b00      	cmp	r3, #0
 8002660:	d02f      	beq.n	80026c2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002664:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002668:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002670:	f000 f8b5 	bl	80027de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002676:	1e5a      	subs	r2, r3, #1
 8002678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800267c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002684:	d112      	bne.n	80026ac <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d016      	beq.n	80026bc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800268e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002690:	3310      	adds	r3, #16
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fd60 	bl	8003158 <xTaskRemoveFromEventList>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00e      	beq.n	80026bc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00b      	beq.n	80026bc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e007      	b.n	80026bc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80026ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026b0:	3301      	adds	r3, #1
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	b25a      	sxtb	r2, r3
 80026b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80026bc:	2301      	movs	r3, #1
 80026be:	637b      	str	r3, [r7, #52]	@ 0x34
 80026c0:	e001      	b.n	80026c6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80026c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f383 8811 	msr	BASEPRI, r3
}
 80026d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3738      	adds	r7, #56	@ 0x38
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d006      	beq.n	80026fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f1c3 0307 	rsb	r3, r3, #7
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e001      	b.n	80026fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80026fe:	68fb      	ldr	r3, [r7, #12]
	}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10d      	bne.n	8002744 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d14d      	bne.n	80027cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4618      	mov	r0, r3
 8002736:	f000 ff63 	bl	8003600 <xTaskPriorityDisinherit>
 800273a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	e043      	b.n	80027cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d119      	bne.n	800277e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6858      	ldr	r0, [r3, #4]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	461a      	mov	r2, r3
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	f001 ff3a 	bl	80045ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	441a      	add	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	429a      	cmp	r2, r3
 8002772:	d32b      	bcc.n	80027cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	e026      	b.n	80027cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	68d8      	ldr	r0, [r3, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	461a      	mov	r2, r3
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	f001 ff20 	bl	80045ce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	425b      	negs	r3, r3
 8002798:	441a      	add	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d207      	bcs.n	80027ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	425b      	negs	r3, r3
 80027b4:	441a      	add	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d105      	bne.n	80027cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80027d4:	697b      	ldr	r3, [r7, #20]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d018      	beq.n	8002822 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	441a      	add	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	429a      	cmp	r2, r3
 8002808:	d303      	bcc.n	8002812 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68d9      	ldr	r1, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	461a      	mov	r2, r3
 800281c:	6838      	ldr	r0, [r7, #0]
 800281e:	f001 fed6 	bl	80045ce <memcpy>
	}
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002832:	f001 f96b 	bl	8003b0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800283c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800283e:	e011      	b.n	8002864 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002844:	2b00      	cmp	r3, #0
 8002846:	d012      	beq.n	800286e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3324      	adds	r3, #36	@ 0x24
 800284c:	4618      	mov	r0, r3
 800284e:	f000 fc83 	bl	8003158 <xTaskRemoveFromEventList>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002858:	f000 fd5c 	bl	8003314 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	3b01      	subs	r3, #1
 8002860:	b2db      	uxtb	r3, r3
 8002862:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002868:	2b00      	cmp	r3, #0
 800286a:	dce9      	bgt.n	8002840 <prvUnlockQueue+0x16>
 800286c:	e000      	b.n	8002870 <prvUnlockQueue+0x46>
					break;
 800286e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	22ff      	movs	r2, #255	@ 0xff
 8002874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002878:	f001 f978 	bl	8003b6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800287c:	f001 f946 	bl	8003b0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002886:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002888:	e011      	b.n	80028ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d012      	beq.n	80028b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3310      	adds	r3, #16
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fc5e 	bl	8003158 <xTaskRemoveFromEventList>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80028a2:	f000 fd37 	bl	8003314 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80028a6:	7bbb      	ldrb	r3, [r7, #14]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	dce9      	bgt.n	800288a <prvUnlockQueue+0x60>
 80028b6:	e000      	b.n	80028ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80028b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	22ff      	movs	r2, #255	@ 0xff
 80028be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80028c2:	f001 f953 	bl	8003b6c <vPortExitCritical>
}
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028d6:	f001 f919 	bl	8003b0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d102      	bne.n	80028e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80028e2:	2301      	movs	r3, #1
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	e001      	b.n	80028ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028ec:	f001 f93e 	bl	8003b6c <vPortExitCritical>

	return xReturn;
 80028f0:	68fb      	ldr	r3, [r7, #12]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002902:	f001 f903 	bl	8003b0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290e:	429a      	cmp	r2, r3
 8002910:	d102      	bne.n	8002918 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002912:	2301      	movs	r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	e001      	b.n	800291c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800291c:	f001 f926 	bl	8003b6c <vPortExitCritical>

	return xReturn;
 8002920:	68fb      	ldr	r3, [r7, #12]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800292a:	b580      	push	{r7, lr}
 800292c:	b08e      	sub	sp, #56	@ 0x38
 800292e:	af04      	add	r7, sp, #16
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10b      	bne.n	8002956 <xTaskCreateStatic+0x2c>
	__asm volatile
 800293e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002942:	f383 8811 	msr	BASEPRI, r3
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	623b      	str	r3, [r7, #32]
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	e7fd      	b.n	8002952 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10b      	bne.n	8002974 <xTaskCreateStatic+0x4a>
	__asm volatile
 800295c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	61fb      	str	r3, [r7, #28]
}
 800296e:	bf00      	nop
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002974:	2354      	movs	r3, #84	@ 0x54
 8002976:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	2b54      	cmp	r3, #84	@ 0x54
 800297c:	d00b      	beq.n	8002996 <xTaskCreateStatic+0x6c>
	__asm volatile
 800297e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	61bb      	str	r3, [r7, #24]
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	e7fd      	b.n	8002992 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002996:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800299a:	2b00      	cmp	r3, #0
 800299c:	d01e      	beq.n	80029dc <xTaskCreateStatic+0xb2>
 800299e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d01b      	beq.n	80029dc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029ac:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	2202      	movs	r2, #2
 80029b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029b6:	2300      	movs	r3, #0
 80029b8:	9303      	str	r3, [sp, #12]
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	9302      	str	r3, [sp, #8]
 80029be:	f107 0314 	add.w	r3, r7, #20
 80029c2:	9301      	str	r3, [sp, #4]
 80029c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f850 	bl	8002a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029d6:	f000 f8d5 	bl	8002b84 <prvAddNewTaskToReadyList>
 80029da:	e001      	b.n	80029e0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029e0:	697b      	ldr	r3, [r7, #20]
	}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3728      	adds	r7, #40	@ 0x28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b08c      	sub	sp, #48	@ 0x30
 80029ee:	af04      	add	r7, sp, #16
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f001 f986 	bl	8003d10 <pvPortMalloc>
 8002a04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00e      	beq.n	8002a2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a0c:	2054      	movs	r0, #84	@ 0x54
 8002a0e:	f001 f97f 	bl	8003d10 <pvPortMalloc>
 8002a12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a20:	e005      	b.n	8002a2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a22:	6978      	ldr	r0, [r7, #20]
 8002a24:	f001 fa42 	bl	8003eac <vPortFree>
 8002a28:	e001      	b.n	8002a2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d017      	beq.n	8002a64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a3c:	88fa      	ldrh	r2, [r7, #6]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	9303      	str	r3, [sp, #12]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	9302      	str	r3, [sp, #8]
 8002a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f80e 	bl	8002a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a58:	69f8      	ldr	r0, [r7, #28]
 8002a5a:	f000 f893 	bl	8002b84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	e002      	b.n	8002a6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295
 8002a68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a6a:	69bb      	ldr	r3, [r7, #24]
	}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3720      	adds	r7, #32
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f023 0307 	bic.w	r3, r3, #7
 8002a9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aaa:	f383 8811 	msr	BASEPRI, r3
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	617b      	str	r3, [r7, #20]
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	e7fd      	b.n	8002aba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01f      	beq.n	8002b04 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
 8002ac8:	e012      	b.n	8002af0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	4413      	add	r3, r2
 8002ad0:	7819      	ldrb	r1, [r3, #0]
 8002ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3334      	adds	r3, #52	@ 0x34
 8002ada:	460a      	mov	r2, r1
 8002adc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d006      	beq.n	8002af8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3301      	adds	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	2b0f      	cmp	r3, #15
 8002af4:	d9e9      	bls.n	8002aca <prvInitialiseNewTask+0x56>
 8002af6:	e000      	b.n	8002afa <prvInitialiseNewTask+0x86>
			{
				break;
 8002af8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b02:	e003      	b.n	8002b0c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d901      	bls.n	8002b16 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b12:	2306      	movs	r3, #6
 8002b14:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b20:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b24:	2200      	movs	r2, #0
 8002b26:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff f8de 	bl	8001cee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b34:	3318      	adds	r3, #24
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff f8d9 	bl	8001cee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b44:	f1c3 0207 	rsb	r2, r3, #7
 8002b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b50:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b54:	2200      	movs	r2, #0
 8002b56:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	68f9      	ldr	r1, [r7, #12]
 8002b64:	69b8      	ldr	r0, [r7, #24]
 8002b66:	f000 fedd 	bl	8003924 <pxPortInitialiseStack>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b7c:	bf00      	nop
 8002b7e:	3720      	adds	r7, #32
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b8c:	f000 ffbe 	bl	8003b0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b90:	4b2a      	ldr	r3, [pc, #168]	@ (8002c3c <prvAddNewTaskToReadyList+0xb8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3301      	adds	r3, #1
 8002b96:	4a29      	ldr	r2, [pc, #164]	@ (8002c3c <prvAddNewTaskToReadyList+0xb8>)
 8002b98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b9a:	4b29      	ldr	r3, [pc, #164]	@ (8002c40 <prvAddNewTaskToReadyList+0xbc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ba2:	4a27      	ldr	r2, [pc, #156]	@ (8002c40 <prvAddNewTaskToReadyList+0xbc>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ba8:	4b24      	ldr	r3, [pc, #144]	@ (8002c3c <prvAddNewTaskToReadyList+0xb8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d110      	bne.n	8002bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002bb0:	f000 fbd4 	bl	800335c <prvInitialiseTaskLists>
 8002bb4:	e00d      	b.n	8002bd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002bb6:	4b23      	ldr	r3, [pc, #140]	@ (8002c44 <prvAddNewTaskToReadyList+0xc0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bbe:	4b20      	ldr	r3, [pc, #128]	@ (8002c40 <prvAddNewTaskToReadyList+0xbc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d802      	bhi.n	8002bd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c40 <prvAddNewTaskToReadyList+0xbc>)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c48 <prvAddNewTaskToReadyList+0xc4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c48 <prvAddNewTaskToReadyList+0xc4>)
 8002bda:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be0:	2201      	movs	r2, #1
 8002be2:	409a      	lsls	r2, r3
 8002be4:	4b19      	ldr	r3, [pc, #100]	@ (8002c4c <prvAddNewTaskToReadyList+0xc8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	4a18      	ldr	r2, [pc, #96]	@ (8002c4c <prvAddNewTaskToReadyList+0xc8>)
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4a15      	ldr	r2, [pc, #84]	@ (8002c50 <prvAddNewTaskToReadyList+0xcc>)
 8002bfc:	441a      	add	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3304      	adds	r3, #4
 8002c02:	4619      	mov	r1, r3
 8002c04:	4610      	mov	r0, r2
 8002c06:	f7ff f87e 	bl	8001d06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c0a:	f000 ffaf 	bl	8003b6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c44 <prvAddNewTaskToReadyList+0xc0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00e      	beq.n	8002c34 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c16:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <prvAddNewTaskToReadyList+0xbc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d207      	bcs.n	8002c34 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c24:	4b0b      	ldr	r3, [pc, #44]	@ (8002c54 <prvAddNewTaskToReadyList+0xd0>)
 8002c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000438 	.word	0x20000438
 8002c40:	20000338 	.word	0x20000338
 8002c44:	20000444 	.word	0x20000444
 8002c48:	20000454 	.word	0x20000454
 8002c4c:	20000440 	.word	0x20000440
 8002c50:	2000033c 	.word	0x2000033c
 8002c54:	e000ed04 	.word	0xe000ed04

08002c58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d018      	beq.n	8002c9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c6a:	4b14      	ldr	r3, [pc, #80]	@ (8002cbc <vTaskDelay+0x64>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <vTaskDelay+0x32>
	__asm volatile
 8002c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c76:	f383 8811 	msr	BASEPRI, r3
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	60bb      	str	r3, [r7, #8]
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	e7fd      	b.n	8002c86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c8a:	f000 f87d 	bl	8002d88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c8e:	2100      	movs	r1, #0
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fde1 	bl	8003858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c96:	f000 f885 	bl	8002da4 <xTaskResumeAll>
 8002c9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d107      	bne.n	8002cb2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002ca2:	4b07      	ldr	r3, [pc, #28]	@ (8002cc0 <vTaskDelay+0x68>)
 8002ca4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000460 	.word	0x20000460
 8002cc0:	e000ed04 	.word	0xe000ed04

08002cc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	@ 0x28
 8002cc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002cd2:	463a      	mov	r2, r7
 8002cd4:	1d39      	adds	r1, r7, #4
 8002cd6:	f107 0308 	add.w	r3, r7, #8
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fa38 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ce0:	6839      	ldr	r1, [r7, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	9202      	str	r2, [sp, #8]
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	2300      	movs	r3, #0
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	460a      	mov	r2, r1
 8002cf2:	491f      	ldr	r1, [pc, #124]	@ (8002d70 <vTaskStartScheduler+0xac>)
 8002cf4:	481f      	ldr	r0, [pc, #124]	@ (8002d74 <vTaskStartScheduler+0xb0>)
 8002cf6:	f7ff fe18 	bl	800292a <xTaskCreateStatic>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8002d78 <vTaskStartScheduler+0xb4>)
 8002cfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d00:	4b1d      	ldr	r3, [pc, #116]	@ (8002d78 <vTaskStartScheduler+0xb4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	e001      	b.n	8002d12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d116      	bne.n	8002d46 <vTaskStartScheduler+0x82>
	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	613b      	str	r3, [r7, #16]
}
 8002d2a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d2c:	4b13      	ldr	r3, [pc, #76]	@ (8002d7c <vTaskStartScheduler+0xb8>)
 8002d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d34:	4b12      	ldr	r3, [pc, #72]	@ (8002d80 <vTaskStartScheduler+0xbc>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d3a:	4b12      	ldr	r3, [pc, #72]	@ (8002d84 <vTaskStartScheduler+0xc0>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d40:	f000 fe72 	bl	8003a28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d44:	e00f      	b.n	8002d66 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d10b      	bne.n	8002d66 <vTaskStartScheduler+0xa2>
	__asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	60fb      	str	r3, [r7, #12]
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	e7fd      	b.n	8002d62 <vTaskStartScheduler+0x9e>
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	08004bc4 	.word	0x08004bc4
 8002d74:	0800332d 	.word	0x0800332d
 8002d78:	2000045c 	.word	0x2000045c
 8002d7c:	20000458 	.word	0x20000458
 8002d80:	20000444 	.word	0x20000444
 8002d84:	2000043c 	.word	0x2000043c

08002d88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002d8c:	4b04      	ldr	r3, [pc, #16]	@ (8002da0 <vTaskSuspendAll+0x18>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3301      	adds	r3, #1
 8002d92:	4a03      	ldr	r2, [pc, #12]	@ (8002da0 <vTaskSuspendAll+0x18>)
 8002d94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002d96:	bf00      	nop
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000460 	.word	0x20000460

08002da4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002db2:	4b42      	ldr	r3, [pc, #264]	@ (8002ebc <xTaskResumeAll+0x118>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10b      	bne.n	8002dd2 <xTaskResumeAll+0x2e>
	__asm volatile
 8002dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dbe:	f383 8811 	msr	BASEPRI, r3
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	603b      	str	r3, [r7, #0]
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	e7fd      	b.n	8002dce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002dd2:	f000 fe9b 	bl	8003b0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002dd6:	4b39      	ldr	r3, [pc, #228]	@ (8002ebc <xTaskResumeAll+0x118>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	4a37      	ldr	r2, [pc, #220]	@ (8002ebc <xTaskResumeAll+0x118>)
 8002dde:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002de0:	4b36      	ldr	r3, [pc, #216]	@ (8002ebc <xTaskResumeAll+0x118>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d161      	bne.n	8002eac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002de8:	4b35      	ldr	r3, [pc, #212]	@ (8002ec0 <xTaskResumeAll+0x11c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d05d      	beq.n	8002eac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002df0:	e02e      	b.n	8002e50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002df2:	4b34      	ldr	r3, [pc, #208]	@ (8002ec4 <xTaskResumeAll+0x120>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3318      	adds	r3, #24
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe ffdc 	bl	8001dbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3304      	adds	r3, #4
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe ffd7 	bl	8001dbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e12:	2201      	movs	r2, #1
 8002e14:	409a      	lsls	r2, r3
 8002e16:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec8 <xTaskResumeAll+0x124>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ec8 <xTaskResumeAll+0x124>)
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4a27      	ldr	r2, [pc, #156]	@ (8002ecc <xTaskResumeAll+0x128>)
 8002e2e:	441a      	add	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	3304      	adds	r3, #4
 8002e34:	4619      	mov	r1, r3
 8002e36:	4610      	mov	r0, r2
 8002e38:	f7fe ff65 	bl	8001d06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e40:	4b23      	ldr	r3, [pc, #140]	@ (8002ed0 <xTaskResumeAll+0x12c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d302      	bcc.n	8002e50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002e4a:	4b22      	ldr	r3, [pc, #136]	@ (8002ed4 <xTaskResumeAll+0x130>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec4 <xTaskResumeAll+0x120>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1cc      	bne.n	8002df2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e5e:	f000 fb1b 	bl	8003498 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e62:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed8 <xTaskResumeAll+0x134>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d010      	beq.n	8002e90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e6e:	f000 f837 	bl	8002ee0 <xTaskIncrementTick>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002e78:	4b16      	ldr	r3, [pc, #88]	@ (8002ed4 <xTaskResumeAll+0x130>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3b01      	subs	r3, #1
 8002e82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f1      	bne.n	8002e6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002e8a:	4b13      	ldr	r3, [pc, #76]	@ (8002ed8 <xTaskResumeAll+0x134>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e90:	4b10      	ldr	r3, [pc, #64]	@ (8002ed4 <xTaskResumeAll+0x130>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d009      	beq.n	8002eac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002edc <xTaskResumeAll+0x138>)
 8002e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002eac:	f000 fe5e 	bl	8003b6c <vPortExitCritical>

	return xAlreadyYielded;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000460 	.word	0x20000460
 8002ec0:	20000438 	.word	0x20000438
 8002ec4:	200003f8 	.word	0x200003f8
 8002ec8:	20000440 	.word	0x20000440
 8002ecc:	2000033c 	.word	0x2000033c
 8002ed0:	20000338 	.word	0x20000338
 8002ed4:	2000044c 	.word	0x2000044c
 8002ed8:	20000448 	.word	0x20000448
 8002edc:	e000ed04 	.word	0xe000ed04

08002ee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eea:	4b4f      	ldr	r3, [pc, #316]	@ (8003028 <xTaskIncrementTick+0x148>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f040 808f 	bne.w	8003012 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800302c <xTaskIncrementTick+0x14c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002efc:	4a4b      	ldr	r2, [pc, #300]	@ (800302c <xTaskIncrementTick+0x14c>)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d121      	bne.n	8002f4c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f08:	4b49      	ldr	r3, [pc, #292]	@ (8003030 <xTaskIncrementTick+0x150>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00b      	beq.n	8002f2a <xTaskIncrementTick+0x4a>
	__asm volatile
 8002f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	603b      	str	r3, [r7, #0]
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	e7fd      	b.n	8002f26 <xTaskIncrementTick+0x46>
 8002f2a:	4b41      	ldr	r3, [pc, #260]	@ (8003030 <xTaskIncrementTick+0x150>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	4b40      	ldr	r3, [pc, #256]	@ (8003034 <xTaskIncrementTick+0x154>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a3e      	ldr	r2, [pc, #248]	@ (8003030 <xTaskIncrementTick+0x150>)
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4a3e      	ldr	r2, [pc, #248]	@ (8003034 <xTaskIncrementTick+0x154>)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003038 <xTaskIncrementTick+0x158>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3301      	adds	r3, #1
 8002f44:	4a3c      	ldr	r2, [pc, #240]	@ (8003038 <xTaskIncrementTick+0x158>)
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	f000 faa6 	bl	8003498 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800303c <xTaskIncrementTick+0x15c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d348      	bcc.n	8002fe8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f56:	4b36      	ldr	r3, [pc, #216]	@ (8003030 <xTaskIncrementTick+0x150>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d104      	bne.n	8002f6a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f60:	4b36      	ldr	r3, [pc, #216]	@ (800303c <xTaskIncrementTick+0x15c>)
 8002f62:	f04f 32ff 	mov.w	r2, #4294967295
 8002f66:	601a      	str	r2, [r3, #0]
					break;
 8002f68:	e03e      	b.n	8002fe8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f6a:	4b31      	ldr	r3, [pc, #196]	@ (8003030 <xTaskIncrementTick+0x150>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d203      	bcs.n	8002f8a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f82:	4a2e      	ldr	r2, [pc, #184]	@ (800303c <xTaskIncrementTick+0x15c>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f88:	e02e      	b.n	8002fe8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe ff14 	bl	8001dbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d004      	beq.n	8002fa6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	3318      	adds	r3, #24
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe ff0b 	bl	8001dbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002faa:	2201      	movs	r2, #1
 8002fac:	409a      	lsls	r2, r3
 8002fae:	4b24      	ldr	r3, [pc, #144]	@ (8003040 <xTaskIncrementTick+0x160>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	4a22      	ldr	r2, [pc, #136]	@ (8003040 <xTaskIncrementTick+0x160>)
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003044 <xTaskIncrementTick+0x164>)
 8002fc6:	441a      	add	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	f7fe fe99 	bl	8001d06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <xTaskIncrementTick+0x168>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d3b9      	bcc.n	8002f56 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fe6:	e7b6      	b.n	8002f56 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fe8:	4b17      	ldr	r3, [pc, #92]	@ (8003048 <xTaskIncrementTick+0x168>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fee:	4915      	ldr	r1, [pc, #84]	@ (8003044 <xTaskIncrementTick+0x164>)
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d901      	bls.n	8003004 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003000:	2301      	movs	r3, #1
 8003002:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003004:	4b11      	ldr	r3, [pc, #68]	@ (800304c <xTaskIncrementTick+0x16c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d007      	beq.n	800301c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800300c:	2301      	movs	r3, #1
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	e004      	b.n	800301c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003012:	4b0f      	ldr	r3, [pc, #60]	@ (8003050 <xTaskIncrementTick+0x170>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3301      	adds	r3, #1
 8003018:	4a0d      	ldr	r2, [pc, #52]	@ (8003050 <xTaskIncrementTick+0x170>)
 800301a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800301c:	697b      	ldr	r3, [r7, #20]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000460 	.word	0x20000460
 800302c:	2000043c 	.word	0x2000043c
 8003030:	200003f0 	.word	0x200003f0
 8003034:	200003f4 	.word	0x200003f4
 8003038:	20000450 	.word	0x20000450
 800303c:	20000458 	.word	0x20000458
 8003040:	20000440 	.word	0x20000440
 8003044:	2000033c 	.word	0x2000033c
 8003048:	20000338 	.word	0x20000338
 800304c:	2000044c 	.word	0x2000044c
 8003050:	20000448 	.word	0x20000448

08003054 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800305a:	4b27      	ldr	r3, [pc, #156]	@ (80030f8 <vTaskSwitchContext+0xa4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003062:	4b26      	ldr	r3, [pc, #152]	@ (80030fc <vTaskSwitchContext+0xa8>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003068:	e040      	b.n	80030ec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800306a:	4b24      	ldr	r3, [pc, #144]	@ (80030fc <vTaskSwitchContext+0xa8>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003070:	4b23      	ldr	r3, [pc, #140]	@ (8003100 <vTaskSwitchContext+0xac>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	fab3 f383 	clz	r3, r3
 800307c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800307e:	7afb      	ldrb	r3, [r7, #11]
 8003080:	f1c3 031f 	rsb	r3, r3, #31
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	491f      	ldr	r1, [pc, #124]	@ (8003104 <vTaskSwitchContext+0xb0>)
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10b      	bne.n	80030b2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800309a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309e:	f383 8811 	msr	BASEPRI, r3
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	607b      	str	r3, [r7, #4]
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	e7fd      	b.n	80030ae <vTaskSwitchContext+0x5a>
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4a11      	ldr	r2, [pc, #68]	@ (8003104 <vTaskSwitchContext+0xb0>)
 80030be:	4413      	add	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	605a      	str	r2, [r3, #4]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	3308      	adds	r3, #8
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d104      	bne.n	80030e2 <vTaskSwitchContext+0x8e>
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4a07      	ldr	r2, [pc, #28]	@ (8003108 <vTaskSwitchContext+0xb4>)
 80030ea:	6013      	str	r3, [r2, #0]
}
 80030ec:	bf00      	nop
 80030ee:	371c      	adds	r7, #28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000460 	.word	0x20000460
 80030fc:	2000044c 	.word	0x2000044c
 8003100:	20000440 	.word	0x20000440
 8003104:	2000033c 	.word	0x2000033c
 8003108:	20000338 	.word	0x20000338

0800310c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10b      	bne.n	8003134 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	60fb      	str	r3, [r7, #12]
}
 800312e:	bf00      	nop
 8003130:	bf00      	nop
 8003132:	e7fd      	b.n	8003130 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003134:	4b07      	ldr	r3, [pc, #28]	@ (8003154 <vTaskPlaceOnEventList+0x48>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3318      	adds	r3, #24
 800313a:	4619      	mov	r1, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7fe fe05 	bl	8001d4c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003142:	2101      	movs	r1, #1
 8003144:	6838      	ldr	r0, [r7, #0]
 8003146:	f000 fb87 	bl	8003858 <prvAddCurrentTaskToDelayedList>
}
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000338 	.word	0x20000338

08003158 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10b      	bne.n	8003186 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	60fb      	str	r3, [r7, #12]
}
 8003180:	bf00      	nop
 8003182:	bf00      	nop
 8003184:	e7fd      	b.n	8003182 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	3318      	adds	r3, #24
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe fe16 	bl	8001dbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003190:	4b1d      	ldr	r3, [pc, #116]	@ (8003208 <xTaskRemoveFromEventList+0xb0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d11c      	bne.n	80031d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	3304      	adds	r3, #4
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe fe0d 	bl	8001dbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a6:	2201      	movs	r2, #1
 80031a8:	409a      	lsls	r2, r3
 80031aa:	4b18      	ldr	r3, [pc, #96]	@ (800320c <xTaskRemoveFromEventList+0xb4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	4a16      	ldr	r2, [pc, #88]	@ (800320c <xTaskRemoveFromEventList+0xb4>)
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4a13      	ldr	r2, [pc, #76]	@ (8003210 <xTaskRemoveFromEventList+0xb8>)
 80031c2:	441a      	add	r2, r3
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	3304      	adds	r3, #4
 80031c8:	4619      	mov	r1, r3
 80031ca:	4610      	mov	r0, r2
 80031cc:	f7fe fd9b 	bl	8001d06 <vListInsertEnd>
 80031d0:	e005      	b.n	80031de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	3318      	adds	r3, #24
 80031d6:	4619      	mov	r1, r3
 80031d8:	480e      	ldr	r0, [pc, #56]	@ (8003214 <xTaskRemoveFromEventList+0xbc>)
 80031da:	f7fe fd94 	bl	8001d06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003218 <xTaskRemoveFromEventList+0xc0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d905      	bls.n	80031f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80031ec:	2301      	movs	r3, #1
 80031ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80031f0:	4b0a      	ldr	r3, [pc, #40]	@ (800321c <xTaskRemoveFromEventList+0xc4>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	e001      	b.n	80031fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80031fc:	697b      	ldr	r3, [r7, #20]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000460 	.word	0x20000460
 800320c:	20000440 	.word	0x20000440
 8003210:	2000033c 	.word	0x2000033c
 8003214:	200003f8 	.word	0x200003f8
 8003218:	20000338 	.word	0x20000338
 800321c:	2000044c 	.word	0x2000044c

08003220 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003228:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <vTaskInternalSetTimeOutState+0x24>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003230:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <vTaskInternalSetTimeOutState+0x28>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	605a      	str	r2, [r3, #4]
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20000450 	.word	0x20000450
 8003248:	2000043c 	.word	0x2000043c

0800324c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10b      	bne.n	8003274 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800325c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	613b      	str	r3, [r7, #16]
}
 800326e:	bf00      	nop
 8003270:	bf00      	nop
 8003272:	e7fd      	b.n	8003270 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10b      	bne.n	8003292 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	60fb      	str	r3, [r7, #12]
}
 800328c:	bf00      	nop
 800328e:	bf00      	nop
 8003290:	e7fd      	b.n	800328e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003292:	f000 fc3b 	bl	8003b0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003296:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <xTaskCheckForTimeOut+0xc0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ae:	d102      	bne.n	80032b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	e023      	b.n	80032fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4b15      	ldr	r3, [pc, #84]	@ (8003310 <xTaskCheckForTimeOut+0xc4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d007      	beq.n	80032d2 <xTaskCheckForTimeOut+0x86>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d302      	bcc.n	80032d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80032cc:	2301      	movs	r3, #1
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	e015      	b.n	80032fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d20b      	bcs.n	80032f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	1ad2      	subs	r2, r2, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff ff99 	bl	8003220 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	e004      	b.n	80032fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80032fa:	2301      	movs	r3, #1
 80032fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80032fe:	f000 fc35 	bl	8003b6c <vPortExitCritical>

	return xReturn;
 8003302:	69fb      	ldr	r3, [r7, #28]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3720      	adds	r7, #32
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	2000043c 	.word	0x2000043c
 8003310:	20000450 	.word	0x20000450

08003314 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003318:	4b03      	ldr	r3, [pc, #12]	@ (8003328 <vTaskMissedYield+0x14>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]
}
 800331e:	bf00      	nop
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	2000044c 	.word	0x2000044c

0800332c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003334:	f000 f852 	bl	80033dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003338:	4b06      	ldr	r3, [pc, #24]	@ (8003354 <prvIdleTask+0x28>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d9f9      	bls.n	8003334 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003340:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <prvIdleTask+0x2c>)
 8003342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003350:	e7f0      	b.n	8003334 <prvIdleTask+0x8>
 8003352:	bf00      	nop
 8003354:	2000033c 	.word	0x2000033c
 8003358:	e000ed04 	.word	0xe000ed04

0800335c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	e00c      	b.n	8003382 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4a12      	ldr	r2, [pc, #72]	@ (80033bc <prvInitialiseTaskLists+0x60>)
 8003374:	4413      	add	r3, r2
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fc9a 	bl	8001cb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3301      	adds	r3, #1
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b06      	cmp	r3, #6
 8003386:	d9ef      	bls.n	8003368 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003388:	480d      	ldr	r0, [pc, #52]	@ (80033c0 <prvInitialiseTaskLists+0x64>)
 800338a:	f7fe fc91 	bl	8001cb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800338e:	480d      	ldr	r0, [pc, #52]	@ (80033c4 <prvInitialiseTaskLists+0x68>)
 8003390:	f7fe fc8e 	bl	8001cb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003394:	480c      	ldr	r0, [pc, #48]	@ (80033c8 <prvInitialiseTaskLists+0x6c>)
 8003396:	f7fe fc8b 	bl	8001cb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800339a:	480c      	ldr	r0, [pc, #48]	@ (80033cc <prvInitialiseTaskLists+0x70>)
 800339c:	f7fe fc88 	bl	8001cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80033a0:	480b      	ldr	r0, [pc, #44]	@ (80033d0 <prvInitialiseTaskLists+0x74>)
 80033a2:	f7fe fc85 	bl	8001cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80033a6:	4b0b      	ldr	r3, [pc, #44]	@ (80033d4 <prvInitialiseTaskLists+0x78>)
 80033a8:	4a05      	ldr	r2, [pc, #20]	@ (80033c0 <prvInitialiseTaskLists+0x64>)
 80033aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033ac:	4b0a      	ldr	r3, [pc, #40]	@ (80033d8 <prvInitialiseTaskLists+0x7c>)
 80033ae:	4a05      	ldr	r2, [pc, #20]	@ (80033c4 <prvInitialiseTaskLists+0x68>)
 80033b0:	601a      	str	r2, [r3, #0]
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	2000033c 	.word	0x2000033c
 80033c0:	200003c8 	.word	0x200003c8
 80033c4:	200003dc 	.word	0x200003dc
 80033c8:	200003f8 	.word	0x200003f8
 80033cc:	2000040c 	.word	0x2000040c
 80033d0:	20000424 	.word	0x20000424
 80033d4:	200003f0 	.word	0x200003f0
 80033d8:	200003f4 	.word	0x200003f4

080033dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033e2:	e019      	b.n	8003418 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80033e4:	f000 fb92 	bl	8003b0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e8:	4b10      	ldr	r3, [pc, #64]	@ (800342c <prvCheckTasksWaitingTermination+0x50>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fce1 	bl	8001dbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80033fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003430 <prvCheckTasksWaitingTermination+0x54>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3b01      	subs	r3, #1
 8003400:	4a0b      	ldr	r2, [pc, #44]	@ (8003430 <prvCheckTasksWaitingTermination+0x54>)
 8003402:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003404:	4b0b      	ldr	r3, [pc, #44]	@ (8003434 <prvCheckTasksWaitingTermination+0x58>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3b01      	subs	r3, #1
 800340a:	4a0a      	ldr	r2, [pc, #40]	@ (8003434 <prvCheckTasksWaitingTermination+0x58>)
 800340c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800340e:	f000 fbad 	bl	8003b6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f810 	bl	8003438 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003418:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <prvCheckTasksWaitingTermination+0x58>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e1      	bne.n	80033e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	2000040c 	.word	0x2000040c
 8003430:	20000438 	.word	0x20000438
 8003434:	20000420 	.word	0x20000420

08003438 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003446:	2b00      	cmp	r3, #0
 8003448:	d108      	bne.n	800345c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fd2c 	bl	8003eac <vPortFree>
				vPortFree( pxTCB );
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fd29 	bl	8003eac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800345a:	e019      	b.n	8003490 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003462:	2b01      	cmp	r3, #1
 8003464:	d103      	bne.n	800346e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fd20 	bl	8003eac <vPortFree>
	}
 800346c:	e010      	b.n	8003490 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003474:	2b02      	cmp	r3, #2
 8003476:	d00b      	beq.n	8003490 <prvDeleteTCB+0x58>
	__asm volatile
 8003478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	60fb      	str	r3, [r7, #12]
}
 800348a:	bf00      	nop
 800348c:	bf00      	nop
 800348e:	e7fd      	b.n	800348c <prvDeleteTCB+0x54>
	}
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800349e:	4b0c      	ldr	r3, [pc, #48]	@ (80034d0 <prvResetNextTaskUnblockTime+0x38>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d104      	bne.n	80034b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80034a8:	4b0a      	ldr	r3, [pc, #40]	@ (80034d4 <prvResetNextTaskUnblockTime+0x3c>)
 80034aa:	f04f 32ff 	mov.w	r2, #4294967295
 80034ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80034b0:	e008      	b.n	80034c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034b2:	4b07      	ldr	r3, [pc, #28]	@ (80034d0 <prvResetNextTaskUnblockTime+0x38>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4a04      	ldr	r2, [pc, #16]	@ (80034d4 <prvResetNextTaskUnblockTime+0x3c>)
 80034c2:	6013      	str	r3, [r2, #0]
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	200003f0 	.word	0x200003f0
 80034d4:	20000458 	.word	0x20000458

080034d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80034de:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <xTaskGetSchedulerState+0x34>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d102      	bne.n	80034ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80034e6:	2301      	movs	r3, #1
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	e008      	b.n	80034fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ec:	4b08      	ldr	r3, [pc, #32]	@ (8003510 <xTaskGetSchedulerState+0x38>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80034f4:	2302      	movs	r3, #2
 80034f6:	607b      	str	r3, [r7, #4]
 80034f8:	e001      	b.n	80034fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80034fa:	2300      	movs	r3, #0
 80034fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80034fe:	687b      	ldr	r3, [r7, #4]
	}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000444 	.word	0x20000444
 8003510:	20000460 	.word	0x20000460

08003514 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d05e      	beq.n	80035e8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800352e:	4b31      	ldr	r3, [pc, #196]	@ (80035f4 <xTaskPriorityInherit+0xe0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003534:	429a      	cmp	r2, r3
 8003536:	d24e      	bcs.n	80035d6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	db06      	blt.n	800354e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003540:	4b2c      	ldr	r3, [pc, #176]	@ (80035f4 <xTaskPriorityInherit+0xe0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003546:	f1c3 0207 	rsb	r2, r3, #7
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	6959      	ldr	r1, [r3, #20]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4a26      	ldr	r2, [pc, #152]	@ (80035f8 <xTaskPriorityInherit+0xe4>)
 8003560:	4413      	add	r3, r2
 8003562:	4299      	cmp	r1, r3
 8003564:	d12f      	bne.n	80035c6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	3304      	adds	r3, #4
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe fc26 	bl	8001dbc <uxListRemove>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357a:	2201      	movs	r2, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43da      	mvns	r2, r3
 8003582:	4b1e      	ldr	r3, [pc, #120]	@ (80035fc <xTaskPriorityInherit+0xe8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4013      	ands	r3, r2
 8003588:	4a1c      	ldr	r2, [pc, #112]	@ (80035fc <xTaskPriorityInherit+0xe8>)
 800358a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800358c:	4b19      	ldr	r3, [pc, #100]	@ (80035f4 <xTaskPriorityInherit+0xe0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359a:	2201      	movs	r2, #1
 800359c:	409a      	lsls	r2, r3
 800359e:	4b17      	ldr	r3, [pc, #92]	@ (80035fc <xTaskPriorityInherit+0xe8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	4a15      	ldr	r2, [pc, #84]	@ (80035fc <xTaskPriorityInherit+0xe8>)
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4a10      	ldr	r2, [pc, #64]	@ (80035f8 <xTaskPriorityInherit+0xe4>)
 80035b6:	441a      	add	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	4610      	mov	r0, r2
 80035c0:	f7fe fba1 	bl	8001d06 <vListInsertEnd>
 80035c4:	e004      	b.n	80035d0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80035c6:	4b0b      	ldr	r3, [pc, #44]	@ (80035f4 <xTaskPriorityInherit+0xe0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80035d0:	2301      	movs	r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e008      	b.n	80035e8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035da:	4b06      	ldr	r3, [pc, #24]	@ (80035f4 <xTaskPriorityInherit+0xe0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d201      	bcs.n	80035e8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80035e4:	2301      	movs	r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80035e8:	68fb      	ldr	r3, [r7, #12]
	}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20000338 	.word	0x20000338
 80035f8:	2000033c 	.word	0x2000033c
 80035fc:	20000440 	.word	0x20000440

08003600 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d070      	beq.n	80036f8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003616:	4b3b      	ldr	r3, [pc, #236]	@ (8003704 <xTaskPriorityDisinherit+0x104>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	429a      	cmp	r2, r3
 800361e:	d00b      	beq.n	8003638 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	60fb      	str	r3, [r7, #12]
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10b      	bne.n	8003658 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	60bb      	str	r3, [r7, #8]
}
 8003652:	bf00      	nop
 8003654:	bf00      	nop
 8003656:	e7fd      	b.n	8003654 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800365c:	1e5a      	subs	r2, r3, #1
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	429a      	cmp	r2, r3
 800366c:	d044      	beq.n	80036f8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003672:	2b00      	cmp	r3, #0
 8003674:	d140      	bne.n	80036f8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	3304      	adds	r3, #4
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe fb9e 	bl	8001dbc <uxListRemove>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d115      	bne.n	80036b2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800368a:	491f      	ldr	r1, [pc, #124]	@ (8003708 <xTaskPriorityDisinherit+0x108>)
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10a      	bne.n	80036b2 <xTaskPriorityDisinherit+0xb2>
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a0:	2201      	movs	r2, #1
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43da      	mvns	r2, r3
 80036a8:	4b18      	ldr	r3, [pc, #96]	@ (800370c <xTaskPriorityDisinherit+0x10c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4013      	ands	r3, r2
 80036ae:	4a17      	ldr	r2, [pc, #92]	@ (800370c <xTaskPriorityDisinherit+0x10c>)
 80036b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036be:	f1c3 0207 	rsb	r2, r3, #7
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ca:	2201      	movs	r2, #1
 80036cc:	409a      	lsls	r2, r3
 80036ce:	4b0f      	ldr	r3, [pc, #60]	@ (800370c <xTaskPriorityDisinherit+0x10c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	4a0d      	ldr	r2, [pc, #52]	@ (800370c <xTaskPriorityDisinherit+0x10c>)
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4a08      	ldr	r2, [pc, #32]	@ (8003708 <xTaskPriorityDisinherit+0x108>)
 80036e6:	441a      	add	r2, r3
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	3304      	adds	r3, #4
 80036ec:	4619      	mov	r1, r3
 80036ee:	4610      	mov	r0, r2
 80036f0:	f7fe fb09 	bl	8001d06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80036f4:	2301      	movs	r3, #1
 80036f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80036f8:	697b      	ldr	r3, [r7, #20]
	}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000338 	.word	0x20000338
 8003708:	2000033c 	.word	0x2000033c
 800370c:	20000440 	.word	0x20000440

08003710 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800371e:	2301      	movs	r3, #1
 8003720:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d079      	beq.n	800381c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10b      	bne.n	8003748 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8003730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	60fb      	str	r3, [r7, #12]
}
 8003742:	bf00      	nop
 8003744:	bf00      	nop
 8003746:	e7fd      	b.n	8003744 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d902      	bls.n	8003758 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	e002      	b.n	800375e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	429a      	cmp	r2, r3
 8003766:	d059      	beq.n	800381c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	429a      	cmp	r2, r3
 8003770:	d154      	bne.n	800381c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003772:	4b2c      	ldr	r3, [pc, #176]	@ (8003824 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	429a      	cmp	r2, r3
 800377a:	d10b      	bne.n	8003794 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	60bb      	str	r3, [r7, #8]
}
 800378e:	bf00      	nop
 8003790:	bf00      	nop
 8003792:	e7fd      	b.n	8003790 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003798:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	db04      	blt.n	80037b2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f1c3 0207 	rsb	r2, r3, #7
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	6959      	ldr	r1, [r3, #20]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4a19      	ldr	r2, [pc, #100]	@ (8003828 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80037c2:	4413      	add	r3, r2
 80037c4:	4299      	cmp	r1, r3
 80037c6:	d129      	bne.n	800381c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	3304      	adds	r3, #4
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe faf5 	bl	8001dbc <uxListRemove>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037dc:	2201      	movs	r2, #1
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43da      	mvns	r2, r3
 80037e4:	4b11      	ldr	r3, [pc, #68]	@ (800382c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4013      	ands	r3, r2
 80037ea:	4a10      	ldr	r2, [pc, #64]	@ (800382c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80037ec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f2:	2201      	movs	r2, #1
 80037f4:	409a      	lsls	r2, r3
 80037f6:	4b0d      	ldr	r3, [pc, #52]	@ (800382c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	4a0b      	ldr	r2, [pc, #44]	@ (800382c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4a06      	ldr	r2, [pc, #24]	@ (8003828 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800380e:	441a      	add	r2, r3
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	3304      	adds	r3, #4
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f7fe fa75 	bl	8001d06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800381c:	bf00      	nop
 800381e:	3720      	adds	r7, #32
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000338 	.word	0x20000338
 8003828:	2000033c 	.word	0x2000033c
 800382c:	20000440 	.word	0x20000440

08003830 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003834:	4b07      	ldr	r3, [pc, #28]	@ (8003854 <pvTaskIncrementMutexHeldCount+0x24>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d004      	beq.n	8003846 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800383c:	4b05      	ldr	r3, [pc, #20]	@ (8003854 <pvTaskIncrementMutexHeldCount+0x24>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003842:	3201      	adds	r2, #1
 8003844:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8003846:	4b03      	ldr	r3, [pc, #12]	@ (8003854 <pvTaskIncrementMutexHeldCount+0x24>)
 8003848:	681b      	ldr	r3, [r3, #0]
	}
 800384a:	4618      	mov	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000338 	.word	0x20000338

08003858 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003862:	4b29      	ldr	r3, [pc, #164]	@ (8003908 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003868:	4b28      	ldr	r3, [pc, #160]	@ (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3304      	adds	r3, #4
 800386e:	4618      	mov	r0, r3
 8003870:	f7fe faa4 	bl	8001dbc <uxListRemove>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10b      	bne.n	8003892 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800387a:	4b24      	ldr	r3, [pc, #144]	@ (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003880:	2201      	movs	r2, #1
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	4b21      	ldr	r3, [pc, #132]	@ (8003910 <prvAddCurrentTaskToDelayedList+0xb8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4013      	ands	r3, r2
 800388e:	4a20      	ldr	r2, [pc, #128]	@ (8003910 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003890:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d10a      	bne.n	80038b0 <prvAddCurrentTaskToDelayedList+0x58>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d007      	beq.n	80038b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038a0:	4b1a      	ldr	r3, [pc, #104]	@ (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3304      	adds	r3, #4
 80038a6:	4619      	mov	r1, r3
 80038a8:	481a      	ldr	r0, [pc, #104]	@ (8003914 <prvAddCurrentTaskToDelayedList+0xbc>)
 80038aa:	f7fe fa2c 	bl	8001d06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038ae:	e026      	b.n	80038fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4413      	add	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038b8:	4b14      	ldr	r3, [pc, #80]	@ (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d209      	bcs.n	80038dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038c8:	4b13      	ldr	r3, [pc, #76]	@ (8003918 <prvAddCurrentTaskToDelayedList+0xc0>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b0f      	ldr	r3, [pc, #60]	@ (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3304      	adds	r3, #4
 80038d2:	4619      	mov	r1, r3
 80038d4:	4610      	mov	r0, r2
 80038d6:	f7fe fa39 	bl	8001d4c <vListInsert>
}
 80038da:	e010      	b.n	80038fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038dc:	4b0f      	ldr	r3, [pc, #60]	@ (800391c <prvAddCurrentTaskToDelayedList+0xc4>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b0a      	ldr	r3, [pc, #40]	@ (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f7fe fa2f 	bl	8001d4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80038ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003920 <prvAddCurrentTaskToDelayedList+0xc8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d202      	bcs.n	80038fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80038f8:	4a09      	ldr	r2, [pc, #36]	@ (8003920 <prvAddCurrentTaskToDelayedList+0xc8>)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6013      	str	r3, [r2, #0]
}
 80038fe:	bf00      	nop
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	2000043c 	.word	0x2000043c
 800390c:	20000338 	.word	0x20000338
 8003910:	20000440 	.word	0x20000440
 8003914:	20000424 	.word	0x20000424
 8003918:	200003f4 	.word	0x200003f4
 800391c:	200003f0 	.word	0x200003f0
 8003920:	20000458 	.word	0x20000458

08003924 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3b04      	subs	r3, #4
 8003934:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800393c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3b04      	subs	r3, #4
 8003942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f023 0201 	bic.w	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3b04      	subs	r3, #4
 8003952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003954:	4a08      	ldr	r2, [pc, #32]	@ (8003978 <pxPortInitialiseStack+0x54>)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3b14      	subs	r3, #20
 800395e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	3b20      	subs	r3, #32
 800396a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800396c:	68fb      	ldr	r3, [r7, #12]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	0800397d 	.word	0x0800397d

0800397c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003982:	2300      	movs	r3, #0
 8003984:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003986:	4b12      	ldr	r3, [pc, #72]	@ (80039d0 <prvTaskExitError+0x54>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398e:	d00b      	beq.n	80039a8 <prvTaskExitError+0x2c>
	__asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	60fb      	str	r3, [r7, #12]
}
 80039a2:	bf00      	nop
 80039a4:	bf00      	nop
 80039a6:	e7fd      	b.n	80039a4 <prvTaskExitError+0x28>
	__asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	60bb      	str	r3, [r7, #8]
}
 80039ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80039bc:	bf00      	nop
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0fc      	beq.n	80039be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	2000000c 	.word	0x2000000c
	...

080039e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80039e0:	4b07      	ldr	r3, [pc, #28]	@ (8003a00 <pxCurrentTCBConst2>)
 80039e2:	6819      	ldr	r1, [r3, #0]
 80039e4:	6808      	ldr	r0, [r1, #0]
 80039e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039ea:	f380 8809 	msr	PSP, r0
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f04f 0000 	mov.w	r0, #0
 80039f6:	f380 8811 	msr	BASEPRI, r0
 80039fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80039fe:	4770      	bx	lr

08003a00 <pxCurrentTCBConst2>:
 8003a00:	20000338 	.word	0x20000338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop

08003a08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003a08:	4806      	ldr	r0, [pc, #24]	@ (8003a24 <prvPortStartFirstTask+0x1c>)
 8003a0a:	6800      	ldr	r0, [r0, #0]
 8003a0c:	6800      	ldr	r0, [r0, #0]
 8003a0e:	f380 8808 	msr	MSP, r0
 8003a12:	b662      	cpsie	i
 8003a14:	b661      	cpsie	f
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	df00      	svc	0
 8003a20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a22:	bf00      	nop
 8003a24:	e000ed08 	.word	0xe000ed08

08003a28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a2e:	4b32      	ldr	r3, [pc, #200]	@ (8003af8 <xPortStartScheduler+0xd0>)
 8003a30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	22ff      	movs	r2, #255	@ 0xff
 8003a3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	4b2a      	ldr	r3, [pc, #168]	@ (8003afc <xPortStartScheduler+0xd4>)
 8003a54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a56:	4b2a      	ldr	r3, [pc, #168]	@ (8003b00 <xPortStartScheduler+0xd8>)
 8003a58:	2207      	movs	r2, #7
 8003a5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a5c:	e009      	b.n	8003a72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003a5e:	4b28      	ldr	r3, [pc, #160]	@ (8003b00 <xPortStartScheduler+0xd8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	4a26      	ldr	r2, [pc, #152]	@ (8003b00 <xPortStartScheduler+0xd8>)
 8003a66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a7a:	2b80      	cmp	r3, #128	@ 0x80
 8003a7c:	d0ef      	beq.n	8003a5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a7e:	4b20      	ldr	r3, [pc, #128]	@ (8003b00 <xPortStartScheduler+0xd8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f1c3 0307 	rsb	r3, r3, #7
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d00b      	beq.n	8003aa2 <xPortStartScheduler+0x7a>
	__asm volatile
 8003a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	60bb      	str	r3, [r7, #8]
}
 8003a9c:	bf00      	nop
 8003a9e:	bf00      	nop
 8003aa0:	e7fd      	b.n	8003a9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003aa2:	4b17      	ldr	r3, [pc, #92]	@ (8003b00 <xPortStartScheduler+0xd8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	021b      	lsls	r3, r3, #8
 8003aa8:	4a15      	ldr	r2, [pc, #84]	@ (8003b00 <xPortStartScheduler+0xd8>)
 8003aaa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003aac:	4b14      	ldr	r3, [pc, #80]	@ (8003b00 <xPortStartScheduler+0xd8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ab4:	4a12      	ldr	r2, [pc, #72]	@ (8003b00 <xPortStartScheduler+0xd8>)
 8003ab6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003ac0:	4b10      	ldr	r3, [pc, #64]	@ (8003b04 <xPortStartScheduler+0xdc>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a0f      	ldr	r2, [pc, #60]	@ (8003b04 <xPortStartScheduler+0xdc>)
 8003ac6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003aca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003acc:	4b0d      	ldr	r3, [pc, #52]	@ (8003b04 <xPortStartScheduler+0xdc>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a0c      	ldr	r2, [pc, #48]	@ (8003b04 <xPortStartScheduler+0xdc>)
 8003ad2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003ad6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ad8:	f000 f8b8 	bl	8003c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003adc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b08 <xPortStartScheduler+0xe0>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ae2:	f7ff ff91 	bl	8003a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ae6:	f7ff fab5 	bl	8003054 <vTaskSwitchContext>
	prvTaskExitError();
 8003aea:	f7ff ff47 	bl	800397c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	e000e400 	.word	0xe000e400
 8003afc:	20000464 	.word	0x20000464
 8003b00:	20000468 	.word	0x20000468
 8003b04:	e000ed20 	.word	0xe000ed20
 8003b08:	2000000c 	.word	0x2000000c

08003b0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	607b      	str	r3, [r7, #4]
}
 8003b24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b26:	4b0f      	ldr	r3, [pc, #60]	@ (8003b64 <vPortEnterCritical+0x58>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b64 <vPortEnterCritical+0x58>)
 8003b2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b30:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <vPortEnterCritical+0x58>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d110      	bne.n	8003b5a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b38:	4b0b      	ldr	r3, [pc, #44]	@ (8003b68 <vPortEnterCritical+0x5c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <vPortEnterCritical+0x4e>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	603b      	str	r3, [r7, #0]
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	e7fd      	b.n	8003b56 <vPortEnterCritical+0x4a>
	}
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	2000000c 	.word	0x2000000c
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b72:	4b12      	ldr	r3, [pc, #72]	@ (8003bbc <vPortExitCritical+0x50>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10b      	bne.n	8003b92 <vPortExitCritical+0x26>
	__asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	607b      	str	r3, [r7, #4]
}
 8003b8c:	bf00      	nop
 8003b8e:	bf00      	nop
 8003b90:	e7fd      	b.n	8003b8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b92:	4b0a      	ldr	r3, [pc, #40]	@ (8003bbc <vPortExitCritical+0x50>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	4a08      	ldr	r2, [pc, #32]	@ (8003bbc <vPortExitCritical+0x50>)
 8003b9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b9c:	4b07      	ldr	r3, [pc, #28]	@ (8003bbc <vPortExitCritical+0x50>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <vPortExitCritical+0x44>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f383 8811 	msr	BASEPRI, r3
}
 8003bae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	2000000c 	.word	0x2000000c

08003bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003bc0:	f3ef 8009 	mrs	r0, PSP
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003c00 <pxCurrentTCBConst>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003bd0:	6010      	str	r0, [r2, #0]
 8003bd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003bd6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003bda:	f380 8811 	msr	BASEPRI, r0
 8003bde:	f7ff fa39 	bl	8003054 <vTaskSwitchContext>
 8003be2:	f04f 0000 	mov.w	r0, #0
 8003be6:	f380 8811 	msr	BASEPRI, r0
 8003bea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003bee:	6819      	ldr	r1, [r3, #0]
 8003bf0:	6808      	ldr	r0, [r1, #0]
 8003bf2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003bf6:	f380 8809 	msr	PSP, r0
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	4770      	bx	lr

08003c00 <pxCurrentTCBConst>:
 8003c00:	20000338 	.word	0x20000338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop

08003c08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	607b      	str	r3, [r7, #4]
}
 8003c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003c22:	f7ff f95d 	bl	8002ee0 <xTaskIncrementTick>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <xPortSysTickHandler+0x40>)
 8003c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	2300      	movs	r3, #0
 8003c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	f383 8811 	msr	BASEPRI, r3
}
 8003c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c40:	bf00      	nop
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	e000ed04 	.word	0xe000ed04

08003c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c50:	4b0a      	ldr	r3, [pc, #40]	@ (8003c7c <vPortSetupTimerInterrupt+0x30>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c56:	4b0a      	ldr	r3, [pc, #40]	@ (8003c80 <vPortSetupTimerInterrupt+0x34>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c5c:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <vPortSetupTimerInterrupt+0x38>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a09      	ldr	r2, [pc, #36]	@ (8003c88 <vPortSetupTimerInterrupt+0x3c>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	099b      	lsrs	r3, r3, #6
 8003c68:	4a08      	ldr	r2, [pc, #32]	@ (8003c8c <vPortSetupTimerInterrupt+0x40>)
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c6e:	4b03      	ldr	r3, [pc, #12]	@ (8003c7c <vPortSetupTimerInterrupt+0x30>)
 8003c70:	2207      	movs	r2, #7
 8003c72:	601a      	str	r2, [r3, #0]
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	e000e010 	.word	0xe000e010
 8003c80:	e000e018 	.word	0xe000e018
 8003c84:	20000000 	.word	0x20000000
 8003c88:	10624dd3 	.word	0x10624dd3
 8003c8c:	e000e014 	.word	0xe000e014

08003c90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003c96:	f3ef 8305 	mrs	r3, IPSR
 8003c9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b0f      	cmp	r3, #15
 8003ca0:	d915      	bls.n	8003cce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003ca2:	4a17      	ldr	r2, [pc, #92]	@ (8003d00 <vPortValidateInterruptPriority+0x70>)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003cac:	4b15      	ldr	r3, [pc, #84]	@ (8003d04 <vPortValidateInterruptPriority+0x74>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	7afa      	ldrb	r2, [r7, #11]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d20b      	bcs.n	8003cce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	607b      	str	r3, [r7, #4]
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	e7fd      	b.n	8003cca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003cce:	4b0e      	ldr	r3, [pc, #56]	@ (8003d08 <vPortValidateInterruptPriority+0x78>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d0c <vPortValidateInterruptPriority+0x7c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d90b      	bls.n	8003cf6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	603b      	str	r3, [r7, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	bf00      	nop
 8003cf4:	e7fd      	b.n	8003cf2 <vPortValidateInterruptPriority+0x62>
	}
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr
 8003d00:	e000e3f0 	.word	0xe000e3f0
 8003d04:	20000464 	.word	0x20000464
 8003d08:	e000ed0c 	.word	0xe000ed0c
 8003d0c:	20000468 	.word	0x20000468

08003d10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08a      	sub	sp, #40	@ 0x28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003d1c:	f7ff f834 	bl	8002d88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d20:	4b5c      	ldr	r3, [pc, #368]	@ (8003e94 <pvPortMalloc+0x184>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d28:	f000 f924 	bl	8003f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d2c:	4b5a      	ldr	r3, [pc, #360]	@ (8003e98 <pvPortMalloc+0x188>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f040 8095 	bne.w	8003e64 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d01e      	beq.n	8003d7e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003d40:	2208      	movs	r2, #8
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4413      	add	r3, r2
 8003d46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d015      	beq.n	8003d7e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f023 0307 	bic.w	r3, r3, #7
 8003d58:	3308      	adds	r3, #8
 8003d5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <pvPortMalloc+0x6e>
	__asm volatile
 8003d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	617b      	str	r3, [r7, #20]
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	e7fd      	b.n	8003d7a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d06f      	beq.n	8003e64 <pvPortMalloc+0x154>
 8003d84:	4b45      	ldr	r3, [pc, #276]	@ (8003e9c <pvPortMalloc+0x18c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d86a      	bhi.n	8003e64 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003d8e:	4b44      	ldr	r3, [pc, #272]	@ (8003ea0 <pvPortMalloc+0x190>)
 8003d90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003d92:	4b43      	ldr	r3, [pc, #268]	@ (8003ea0 <pvPortMalloc+0x190>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d98:	e004      	b.n	8003da4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d903      	bls.n	8003db6 <pvPortMalloc+0xa6>
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f1      	bne.n	8003d9a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003db6:	4b37      	ldr	r3, [pc, #220]	@ (8003e94 <pvPortMalloc+0x184>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d051      	beq.n	8003e64 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	4413      	add	r3, r2
 8003dc8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	1ad2      	subs	r2, r2, r3
 8003dda:	2308      	movs	r3, #8
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d920      	bls.n	8003e24 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4413      	add	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00b      	beq.n	8003e0c <pvPortMalloc+0xfc>
	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	613b      	str	r3, [r7, #16]
}
 8003e06:	bf00      	nop
 8003e08:	bf00      	nop
 8003e0a:	e7fd      	b.n	8003e08 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	1ad2      	subs	r2, r2, r3
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e1e:	69b8      	ldr	r0, [r7, #24]
 8003e20:	f000 f90a 	bl	8004038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e24:	4b1d      	ldr	r3, [pc, #116]	@ (8003e9c <pvPortMalloc+0x18c>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8003e9c <pvPortMalloc+0x18c>)
 8003e30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e32:	4b1a      	ldr	r3, [pc, #104]	@ (8003e9c <pvPortMalloc+0x18c>)
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea4 <pvPortMalloc+0x194>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d203      	bcs.n	8003e46 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e3e:	4b17      	ldr	r3, [pc, #92]	@ (8003e9c <pvPortMalloc+0x18c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a18      	ldr	r2, [pc, #96]	@ (8003ea4 <pvPortMalloc+0x194>)
 8003e44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	4b13      	ldr	r3, [pc, #76]	@ (8003e98 <pvPortMalloc+0x188>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003e5a:	4b13      	ldr	r3, [pc, #76]	@ (8003ea8 <pvPortMalloc+0x198>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	4a11      	ldr	r2, [pc, #68]	@ (8003ea8 <pvPortMalloc+0x198>)
 8003e62:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003e64:	f7fe ff9e 	bl	8002da4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00b      	beq.n	8003e8a <pvPortMalloc+0x17a>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	60fb      	str	r3, [r7, #12]
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	e7fd      	b.n	8003e86 <pvPortMalloc+0x176>
	return pvReturn;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3728      	adds	r7, #40	@ 0x28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20001074 	.word	0x20001074
 8003e98:	20001088 	.word	0x20001088
 8003e9c:	20001078 	.word	0x20001078
 8003ea0:	2000106c 	.word	0x2000106c
 8003ea4:	2000107c 	.word	0x2000107c
 8003ea8:	20001080 	.word	0x20001080

08003eac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d04f      	beq.n	8003f5e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ebe:	2308      	movs	r3, #8
 8003ec0:	425b      	negs	r3, r3
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	4b25      	ldr	r3, [pc, #148]	@ (8003f68 <vPortFree+0xbc>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <vPortFree+0x46>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	60fb      	str	r3, [r7, #12]
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	e7fd      	b.n	8003eee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00b      	beq.n	8003f12 <vPortFree+0x66>
	__asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	60bb      	str	r3, [r7, #8]
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	e7fd      	b.n	8003f0e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	4b14      	ldr	r3, [pc, #80]	@ (8003f68 <vPortFree+0xbc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01e      	beq.n	8003f5e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d11a      	bne.n	8003f5e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f68 <vPortFree+0xbc>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	43db      	mvns	r3, r3
 8003f32:	401a      	ands	r2, r3
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f38:	f7fe ff26 	bl	8002d88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	4b0a      	ldr	r3, [pc, #40]	@ (8003f6c <vPortFree+0xc0>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4413      	add	r3, r2
 8003f46:	4a09      	ldr	r2, [pc, #36]	@ (8003f6c <vPortFree+0xc0>)
 8003f48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f4a:	6938      	ldr	r0, [r7, #16]
 8003f4c:	f000 f874 	bl	8004038 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003f50:	4b07      	ldr	r3, [pc, #28]	@ (8003f70 <vPortFree+0xc4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3301      	adds	r3, #1
 8003f56:	4a06      	ldr	r2, [pc, #24]	@ (8003f70 <vPortFree+0xc4>)
 8003f58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003f5a:	f7fe ff23 	bl	8002da4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f5e:	bf00      	nop
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20001088 	.word	0x20001088
 8003f6c:	20001078 	.word	0x20001078
 8003f70:	20001084 	.word	0x20001084

08003f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f7a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003f7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f80:	4b27      	ldr	r3, [pc, #156]	@ (8004020 <prvHeapInit+0xac>)
 8003f82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00c      	beq.n	8003fa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3307      	adds	r3, #7
 8003f92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0307 	bic.w	r3, r3, #7
 8003f9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8004020 <prvHeapInit+0xac>)
 8003fa4:	4413      	add	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003fac:	4a1d      	ldr	r2, [pc, #116]	@ (8004024 <prvHeapInit+0xb0>)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8004024 <prvHeapInit+0xb0>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0307 	bic.w	r3, r3, #7
 8003fce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4a15      	ldr	r2, [pc, #84]	@ (8004028 <prvHeapInit+0xb4>)
 8003fd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003fd6:	4b14      	ldr	r3, [pc, #80]	@ (8004028 <prvHeapInit+0xb4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003fde:	4b12      	ldr	r3, [pc, #72]	@ (8004028 <prvHeapInit+0xb4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	1ad2      	subs	r2, r2, r3
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8004028 <prvHeapInit+0xb4>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4a0a      	ldr	r2, [pc, #40]	@ (800402c <prvHeapInit+0xb8>)
 8004002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4a09      	ldr	r2, [pc, #36]	@ (8004030 <prvHeapInit+0xbc>)
 800400a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800400c:	4b09      	ldr	r3, [pc, #36]	@ (8004034 <prvHeapInit+0xc0>)
 800400e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004012:	601a      	str	r2, [r3, #0]
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	2000046c 	.word	0x2000046c
 8004024:	2000106c 	.word	0x2000106c
 8004028:	20001074 	.word	0x20001074
 800402c:	2000107c 	.word	0x2000107c
 8004030:	20001078 	.word	0x20001078
 8004034:	20001088 	.word	0x20001088

08004038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004040:	4b27      	ldr	r3, [pc, #156]	@ (80040e0 <prvInsertBlockIntoFreeList+0xa8>)
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	e002      	b.n	800404c <prvInsertBlockIntoFreeList+0x14>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	429a      	cmp	r2, r3
 8004054:	d8f7      	bhi.n	8004046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	4413      	add	r3, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	429a      	cmp	r2, r3
 8004066:	d108      	bne.n	800407a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	441a      	add	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	441a      	add	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d118      	bne.n	80040c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	4b14      	ldr	r3, [pc, #80]	@ (80040e4 <prvInsertBlockIntoFreeList+0xac>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d00d      	beq.n	80040b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	441a      	add	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	e008      	b.n	80040c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80040b6:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <prvInsertBlockIntoFreeList+0xac>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	e003      	b.n	80040c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d002      	beq.n	80040d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040d6:	bf00      	nop
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	2000106c 	.word	0x2000106c
 80040e4:	20001074 	.word	0x20001074

080040e8 <std>:
 80040e8:	2300      	movs	r3, #0
 80040ea:	b510      	push	{r4, lr}
 80040ec:	4604      	mov	r4, r0
 80040ee:	e9c0 3300 	strd	r3, r3, [r0]
 80040f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040f6:	6083      	str	r3, [r0, #8]
 80040f8:	8181      	strh	r1, [r0, #12]
 80040fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80040fc:	81c2      	strh	r2, [r0, #14]
 80040fe:	6183      	str	r3, [r0, #24]
 8004100:	4619      	mov	r1, r3
 8004102:	2208      	movs	r2, #8
 8004104:	305c      	adds	r0, #92	@ 0x5c
 8004106:	f000 f9e7 	bl	80044d8 <memset>
 800410a:	4b0d      	ldr	r3, [pc, #52]	@ (8004140 <std+0x58>)
 800410c:	6224      	str	r4, [r4, #32]
 800410e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004110:	4b0c      	ldr	r3, [pc, #48]	@ (8004144 <std+0x5c>)
 8004112:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004114:	4b0c      	ldr	r3, [pc, #48]	@ (8004148 <std+0x60>)
 8004116:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004118:	4b0c      	ldr	r3, [pc, #48]	@ (800414c <std+0x64>)
 800411a:	6323      	str	r3, [r4, #48]	@ 0x30
 800411c:	4b0c      	ldr	r3, [pc, #48]	@ (8004150 <std+0x68>)
 800411e:	429c      	cmp	r4, r3
 8004120:	d006      	beq.n	8004130 <std+0x48>
 8004122:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004126:	4294      	cmp	r4, r2
 8004128:	d002      	beq.n	8004130 <std+0x48>
 800412a:	33d0      	adds	r3, #208	@ 0xd0
 800412c:	429c      	cmp	r4, r3
 800412e:	d105      	bne.n	800413c <std+0x54>
 8004130:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004138:	f000 ba46 	b.w	80045c8 <__retarget_lock_init_recursive>
 800413c:	bd10      	pop	{r4, pc}
 800413e:	bf00      	nop
 8004140:	08004329 	.word	0x08004329
 8004144:	0800434b 	.word	0x0800434b
 8004148:	08004383 	.word	0x08004383
 800414c:	080043a7 	.word	0x080043a7
 8004150:	2000108c 	.word	0x2000108c

08004154 <stdio_exit_handler>:
 8004154:	4a02      	ldr	r2, [pc, #8]	@ (8004160 <stdio_exit_handler+0xc>)
 8004156:	4903      	ldr	r1, [pc, #12]	@ (8004164 <stdio_exit_handler+0x10>)
 8004158:	4803      	ldr	r0, [pc, #12]	@ (8004168 <stdio_exit_handler+0x14>)
 800415a:	f000 b869 	b.w	8004230 <_fwalk_sglue>
 800415e:	bf00      	nop
 8004160:	20000010 	.word	0x20000010
 8004164:	080048d9 	.word	0x080048d9
 8004168:	20000020 	.word	0x20000020

0800416c <cleanup_stdio>:
 800416c:	6841      	ldr	r1, [r0, #4]
 800416e:	4b0c      	ldr	r3, [pc, #48]	@ (80041a0 <cleanup_stdio+0x34>)
 8004170:	b510      	push	{r4, lr}
 8004172:	4299      	cmp	r1, r3
 8004174:	4604      	mov	r4, r0
 8004176:	d001      	beq.n	800417c <cleanup_stdio+0x10>
 8004178:	f000 fbae 	bl	80048d8 <_fflush_r>
 800417c:	68a1      	ldr	r1, [r4, #8]
 800417e:	4b09      	ldr	r3, [pc, #36]	@ (80041a4 <cleanup_stdio+0x38>)
 8004180:	4299      	cmp	r1, r3
 8004182:	d002      	beq.n	800418a <cleanup_stdio+0x1e>
 8004184:	4620      	mov	r0, r4
 8004186:	f000 fba7 	bl	80048d8 <_fflush_r>
 800418a:	68e1      	ldr	r1, [r4, #12]
 800418c:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <cleanup_stdio+0x3c>)
 800418e:	4299      	cmp	r1, r3
 8004190:	d004      	beq.n	800419c <cleanup_stdio+0x30>
 8004192:	4620      	mov	r0, r4
 8004194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004198:	f000 bb9e 	b.w	80048d8 <_fflush_r>
 800419c:	bd10      	pop	{r4, pc}
 800419e:	bf00      	nop
 80041a0:	2000108c 	.word	0x2000108c
 80041a4:	200010f4 	.word	0x200010f4
 80041a8:	2000115c 	.word	0x2000115c

080041ac <global_stdio_init.part.0>:
 80041ac:	b510      	push	{r4, lr}
 80041ae:	4b0b      	ldr	r3, [pc, #44]	@ (80041dc <global_stdio_init.part.0+0x30>)
 80041b0:	4c0b      	ldr	r4, [pc, #44]	@ (80041e0 <global_stdio_init.part.0+0x34>)
 80041b2:	4a0c      	ldr	r2, [pc, #48]	@ (80041e4 <global_stdio_init.part.0+0x38>)
 80041b4:	4620      	mov	r0, r4
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	2104      	movs	r1, #4
 80041ba:	2200      	movs	r2, #0
 80041bc:	f7ff ff94 	bl	80040e8 <std>
 80041c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041c4:	2201      	movs	r2, #1
 80041c6:	2109      	movs	r1, #9
 80041c8:	f7ff ff8e 	bl	80040e8 <std>
 80041cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041d0:	2202      	movs	r2, #2
 80041d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041d6:	2112      	movs	r1, #18
 80041d8:	f7ff bf86 	b.w	80040e8 <std>
 80041dc:	200011c4 	.word	0x200011c4
 80041e0:	2000108c 	.word	0x2000108c
 80041e4:	08004155 	.word	0x08004155

080041e8 <__sfp_lock_acquire>:
 80041e8:	4801      	ldr	r0, [pc, #4]	@ (80041f0 <__sfp_lock_acquire+0x8>)
 80041ea:	f000 b9ee 	b.w	80045ca <__retarget_lock_acquire_recursive>
 80041ee:	bf00      	nop
 80041f0:	200011cd 	.word	0x200011cd

080041f4 <__sfp_lock_release>:
 80041f4:	4801      	ldr	r0, [pc, #4]	@ (80041fc <__sfp_lock_release+0x8>)
 80041f6:	f000 b9e9 	b.w	80045cc <__retarget_lock_release_recursive>
 80041fa:	bf00      	nop
 80041fc:	200011cd 	.word	0x200011cd

08004200 <__sinit>:
 8004200:	b510      	push	{r4, lr}
 8004202:	4604      	mov	r4, r0
 8004204:	f7ff fff0 	bl	80041e8 <__sfp_lock_acquire>
 8004208:	6a23      	ldr	r3, [r4, #32]
 800420a:	b11b      	cbz	r3, 8004214 <__sinit+0x14>
 800420c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004210:	f7ff bff0 	b.w	80041f4 <__sfp_lock_release>
 8004214:	4b04      	ldr	r3, [pc, #16]	@ (8004228 <__sinit+0x28>)
 8004216:	6223      	str	r3, [r4, #32]
 8004218:	4b04      	ldr	r3, [pc, #16]	@ (800422c <__sinit+0x2c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f5      	bne.n	800420c <__sinit+0xc>
 8004220:	f7ff ffc4 	bl	80041ac <global_stdio_init.part.0>
 8004224:	e7f2      	b.n	800420c <__sinit+0xc>
 8004226:	bf00      	nop
 8004228:	0800416d 	.word	0x0800416d
 800422c:	200011c4 	.word	0x200011c4

08004230 <_fwalk_sglue>:
 8004230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004234:	4607      	mov	r7, r0
 8004236:	4688      	mov	r8, r1
 8004238:	4614      	mov	r4, r2
 800423a:	2600      	movs	r6, #0
 800423c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004240:	f1b9 0901 	subs.w	r9, r9, #1
 8004244:	d505      	bpl.n	8004252 <_fwalk_sglue+0x22>
 8004246:	6824      	ldr	r4, [r4, #0]
 8004248:	2c00      	cmp	r4, #0
 800424a:	d1f7      	bne.n	800423c <_fwalk_sglue+0xc>
 800424c:	4630      	mov	r0, r6
 800424e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004252:	89ab      	ldrh	r3, [r5, #12]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d907      	bls.n	8004268 <_fwalk_sglue+0x38>
 8004258:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800425c:	3301      	adds	r3, #1
 800425e:	d003      	beq.n	8004268 <_fwalk_sglue+0x38>
 8004260:	4629      	mov	r1, r5
 8004262:	4638      	mov	r0, r7
 8004264:	47c0      	blx	r8
 8004266:	4306      	orrs	r6, r0
 8004268:	3568      	adds	r5, #104	@ 0x68
 800426a:	e7e9      	b.n	8004240 <_fwalk_sglue+0x10>

0800426c <_puts_r>:
 800426c:	6a03      	ldr	r3, [r0, #32]
 800426e:	b570      	push	{r4, r5, r6, lr}
 8004270:	4605      	mov	r5, r0
 8004272:	460e      	mov	r6, r1
 8004274:	6884      	ldr	r4, [r0, #8]
 8004276:	b90b      	cbnz	r3, 800427c <_puts_r+0x10>
 8004278:	f7ff ffc2 	bl	8004200 <__sinit>
 800427c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800427e:	07db      	lsls	r3, r3, #31
 8004280:	d405      	bmi.n	800428e <_puts_r+0x22>
 8004282:	89a3      	ldrh	r3, [r4, #12]
 8004284:	0598      	lsls	r0, r3, #22
 8004286:	d402      	bmi.n	800428e <_puts_r+0x22>
 8004288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800428a:	f000 f99e 	bl	80045ca <__retarget_lock_acquire_recursive>
 800428e:	89a3      	ldrh	r3, [r4, #12]
 8004290:	0719      	lsls	r1, r3, #28
 8004292:	d502      	bpl.n	800429a <_puts_r+0x2e>
 8004294:	6923      	ldr	r3, [r4, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d135      	bne.n	8004306 <_puts_r+0x9a>
 800429a:	4621      	mov	r1, r4
 800429c:	4628      	mov	r0, r5
 800429e:	f000 f8c5 	bl	800442c <__swsetup_r>
 80042a2:	b380      	cbz	r0, 8004306 <_puts_r+0x9a>
 80042a4:	f04f 35ff 	mov.w	r5, #4294967295
 80042a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042aa:	07da      	lsls	r2, r3, #31
 80042ac:	d405      	bmi.n	80042ba <_puts_r+0x4e>
 80042ae:	89a3      	ldrh	r3, [r4, #12]
 80042b0:	059b      	lsls	r3, r3, #22
 80042b2:	d402      	bmi.n	80042ba <_puts_r+0x4e>
 80042b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042b6:	f000 f989 	bl	80045cc <__retarget_lock_release_recursive>
 80042ba:	4628      	mov	r0, r5
 80042bc:	bd70      	pop	{r4, r5, r6, pc}
 80042be:	2b00      	cmp	r3, #0
 80042c0:	da04      	bge.n	80042cc <_puts_r+0x60>
 80042c2:	69a2      	ldr	r2, [r4, #24]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	dc17      	bgt.n	80042f8 <_puts_r+0x8c>
 80042c8:	290a      	cmp	r1, #10
 80042ca:	d015      	beq.n	80042f8 <_puts_r+0x8c>
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	6022      	str	r2, [r4, #0]
 80042d2:	7019      	strb	r1, [r3, #0]
 80042d4:	68a3      	ldr	r3, [r4, #8]
 80042d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042da:	3b01      	subs	r3, #1
 80042dc:	60a3      	str	r3, [r4, #8]
 80042de:	2900      	cmp	r1, #0
 80042e0:	d1ed      	bne.n	80042be <_puts_r+0x52>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	da11      	bge.n	800430a <_puts_r+0x9e>
 80042e6:	4622      	mov	r2, r4
 80042e8:	210a      	movs	r1, #10
 80042ea:	4628      	mov	r0, r5
 80042ec:	f000 f85f 	bl	80043ae <__swbuf_r>
 80042f0:	3001      	adds	r0, #1
 80042f2:	d0d7      	beq.n	80042a4 <_puts_r+0x38>
 80042f4:	250a      	movs	r5, #10
 80042f6:	e7d7      	b.n	80042a8 <_puts_r+0x3c>
 80042f8:	4622      	mov	r2, r4
 80042fa:	4628      	mov	r0, r5
 80042fc:	f000 f857 	bl	80043ae <__swbuf_r>
 8004300:	3001      	adds	r0, #1
 8004302:	d1e7      	bne.n	80042d4 <_puts_r+0x68>
 8004304:	e7ce      	b.n	80042a4 <_puts_r+0x38>
 8004306:	3e01      	subs	r6, #1
 8004308:	e7e4      	b.n	80042d4 <_puts_r+0x68>
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	6022      	str	r2, [r4, #0]
 8004310:	220a      	movs	r2, #10
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	e7ee      	b.n	80042f4 <_puts_r+0x88>
	...

08004318 <puts>:
 8004318:	4b02      	ldr	r3, [pc, #8]	@ (8004324 <puts+0xc>)
 800431a:	4601      	mov	r1, r0
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	f7ff bfa5 	b.w	800426c <_puts_r>
 8004322:	bf00      	nop
 8004324:	2000001c 	.word	0x2000001c

08004328 <__sread>:
 8004328:	b510      	push	{r4, lr}
 800432a:	460c      	mov	r4, r1
 800432c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004330:	f000 f8fc 	bl	800452c <_read_r>
 8004334:	2800      	cmp	r0, #0
 8004336:	bfab      	itete	ge
 8004338:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800433a:	89a3      	ldrhlt	r3, [r4, #12]
 800433c:	181b      	addge	r3, r3, r0
 800433e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004342:	bfac      	ite	ge
 8004344:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004346:	81a3      	strhlt	r3, [r4, #12]
 8004348:	bd10      	pop	{r4, pc}

0800434a <__swrite>:
 800434a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800434e:	461f      	mov	r7, r3
 8004350:	898b      	ldrh	r3, [r1, #12]
 8004352:	4605      	mov	r5, r0
 8004354:	05db      	lsls	r3, r3, #23
 8004356:	460c      	mov	r4, r1
 8004358:	4616      	mov	r6, r2
 800435a:	d505      	bpl.n	8004368 <__swrite+0x1e>
 800435c:	2302      	movs	r3, #2
 800435e:	2200      	movs	r2, #0
 8004360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004364:	f000 f8d0 	bl	8004508 <_lseek_r>
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	4632      	mov	r2, r6
 800436c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004370:	81a3      	strh	r3, [r4, #12]
 8004372:	4628      	mov	r0, r5
 8004374:	463b      	mov	r3, r7
 8004376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800437a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800437e:	f000 b8e7 	b.w	8004550 <_write_r>

08004382 <__sseek>:
 8004382:	b510      	push	{r4, lr}
 8004384:	460c      	mov	r4, r1
 8004386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800438a:	f000 f8bd 	bl	8004508 <_lseek_r>
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	89a3      	ldrh	r3, [r4, #12]
 8004392:	bf15      	itete	ne
 8004394:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004396:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800439a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800439e:	81a3      	strheq	r3, [r4, #12]
 80043a0:	bf18      	it	ne
 80043a2:	81a3      	strhne	r3, [r4, #12]
 80043a4:	bd10      	pop	{r4, pc}

080043a6 <__sclose>:
 80043a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043aa:	f000 b89d 	b.w	80044e8 <_close_r>

080043ae <__swbuf_r>:
 80043ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b0:	460e      	mov	r6, r1
 80043b2:	4614      	mov	r4, r2
 80043b4:	4605      	mov	r5, r0
 80043b6:	b118      	cbz	r0, 80043c0 <__swbuf_r+0x12>
 80043b8:	6a03      	ldr	r3, [r0, #32]
 80043ba:	b90b      	cbnz	r3, 80043c0 <__swbuf_r+0x12>
 80043bc:	f7ff ff20 	bl	8004200 <__sinit>
 80043c0:	69a3      	ldr	r3, [r4, #24]
 80043c2:	60a3      	str	r3, [r4, #8]
 80043c4:	89a3      	ldrh	r3, [r4, #12]
 80043c6:	071a      	lsls	r2, r3, #28
 80043c8:	d501      	bpl.n	80043ce <__swbuf_r+0x20>
 80043ca:	6923      	ldr	r3, [r4, #16]
 80043cc:	b943      	cbnz	r3, 80043e0 <__swbuf_r+0x32>
 80043ce:	4621      	mov	r1, r4
 80043d0:	4628      	mov	r0, r5
 80043d2:	f000 f82b 	bl	800442c <__swsetup_r>
 80043d6:	b118      	cbz	r0, 80043e0 <__swbuf_r+0x32>
 80043d8:	f04f 37ff 	mov.w	r7, #4294967295
 80043dc:	4638      	mov	r0, r7
 80043de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	6922      	ldr	r2, [r4, #16]
 80043e4:	b2f6      	uxtb	r6, r6
 80043e6:	1a98      	subs	r0, r3, r2
 80043e8:	6963      	ldr	r3, [r4, #20]
 80043ea:	4637      	mov	r7, r6
 80043ec:	4283      	cmp	r3, r0
 80043ee:	dc05      	bgt.n	80043fc <__swbuf_r+0x4e>
 80043f0:	4621      	mov	r1, r4
 80043f2:	4628      	mov	r0, r5
 80043f4:	f000 fa70 	bl	80048d8 <_fflush_r>
 80043f8:	2800      	cmp	r0, #0
 80043fa:	d1ed      	bne.n	80043d8 <__swbuf_r+0x2a>
 80043fc:	68a3      	ldr	r3, [r4, #8]
 80043fe:	3b01      	subs	r3, #1
 8004400:	60a3      	str	r3, [r4, #8]
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	6022      	str	r2, [r4, #0]
 8004408:	701e      	strb	r6, [r3, #0]
 800440a:	6962      	ldr	r2, [r4, #20]
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	429a      	cmp	r2, r3
 8004410:	d004      	beq.n	800441c <__swbuf_r+0x6e>
 8004412:	89a3      	ldrh	r3, [r4, #12]
 8004414:	07db      	lsls	r3, r3, #31
 8004416:	d5e1      	bpl.n	80043dc <__swbuf_r+0x2e>
 8004418:	2e0a      	cmp	r6, #10
 800441a:	d1df      	bne.n	80043dc <__swbuf_r+0x2e>
 800441c:	4621      	mov	r1, r4
 800441e:	4628      	mov	r0, r5
 8004420:	f000 fa5a 	bl	80048d8 <_fflush_r>
 8004424:	2800      	cmp	r0, #0
 8004426:	d0d9      	beq.n	80043dc <__swbuf_r+0x2e>
 8004428:	e7d6      	b.n	80043d8 <__swbuf_r+0x2a>
	...

0800442c <__swsetup_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	4b29      	ldr	r3, [pc, #164]	@ (80044d4 <__swsetup_r+0xa8>)
 8004430:	4605      	mov	r5, r0
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	460c      	mov	r4, r1
 8004436:	b118      	cbz	r0, 8004440 <__swsetup_r+0x14>
 8004438:	6a03      	ldr	r3, [r0, #32]
 800443a:	b90b      	cbnz	r3, 8004440 <__swsetup_r+0x14>
 800443c:	f7ff fee0 	bl	8004200 <__sinit>
 8004440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004444:	0719      	lsls	r1, r3, #28
 8004446:	d422      	bmi.n	800448e <__swsetup_r+0x62>
 8004448:	06da      	lsls	r2, r3, #27
 800444a:	d407      	bmi.n	800445c <__swsetup_r+0x30>
 800444c:	2209      	movs	r2, #9
 800444e:	602a      	str	r2, [r5, #0]
 8004450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004454:	f04f 30ff 	mov.w	r0, #4294967295
 8004458:	81a3      	strh	r3, [r4, #12]
 800445a:	e033      	b.n	80044c4 <__swsetup_r+0x98>
 800445c:	0758      	lsls	r0, r3, #29
 800445e:	d512      	bpl.n	8004486 <__swsetup_r+0x5a>
 8004460:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004462:	b141      	cbz	r1, 8004476 <__swsetup_r+0x4a>
 8004464:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004468:	4299      	cmp	r1, r3
 800446a:	d002      	beq.n	8004472 <__swsetup_r+0x46>
 800446c:	4628      	mov	r0, r5
 800446e:	f000 f8bd 	bl	80045ec <_free_r>
 8004472:	2300      	movs	r3, #0
 8004474:	6363      	str	r3, [r4, #52]	@ 0x34
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800447c:	81a3      	strh	r3, [r4, #12]
 800447e:	2300      	movs	r3, #0
 8004480:	6063      	str	r3, [r4, #4]
 8004482:	6923      	ldr	r3, [r4, #16]
 8004484:	6023      	str	r3, [r4, #0]
 8004486:	89a3      	ldrh	r3, [r4, #12]
 8004488:	f043 0308 	orr.w	r3, r3, #8
 800448c:	81a3      	strh	r3, [r4, #12]
 800448e:	6923      	ldr	r3, [r4, #16]
 8004490:	b94b      	cbnz	r3, 80044a6 <__swsetup_r+0x7a>
 8004492:	89a3      	ldrh	r3, [r4, #12]
 8004494:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800449c:	d003      	beq.n	80044a6 <__swsetup_r+0x7a>
 800449e:	4621      	mov	r1, r4
 80044a0:	4628      	mov	r0, r5
 80044a2:	f000 fa66 	bl	8004972 <__smakebuf_r>
 80044a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044aa:	f013 0201 	ands.w	r2, r3, #1
 80044ae:	d00a      	beq.n	80044c6 <__swsetup_r+0x9a>
 80044b0:	2200      	movs	r2, #0
 80044b2:	60a2      	str	r2, [r4, #8]
 80044b4:	6962      	ldr	r2, [r4, #20]
 80044b6:	4252      	negs	r2, r2
 80044b8:	61a2      	str	r2, [r4, #24]
 80044ba:	6922      	ldr	r2, [r4, #16]
 80044bc:	b942      	cbnz	r2, 80044d0 <__swsetup_r+0xa4>
 80044be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80044c2:	d1c5      	bne.n	8004450 <__swsetup_r+0x24>
 80044c4:	bd38      	pop	{r3, r4, r5, pc}
 80044c6:	0799      	lsls	r1, r3, #30
 80044c8:	bf58      	it	pl
 80044ca:	6962      	ldrpl	r2, [r4, #20]
 80044cc:	60a2      	str	r2, [r4, #8]
 80044ce:	e7f4      	b.n	80044ba <__swsetup_r+0x8e>
 80044d0:	2000      	movs	r0, #0
 80044d2:	e7f7      	b.n	80044c4 <__swsetup_r+0x98>
 80044d4:	2000001c 	.word	0x2000001c

080044d8 <memset>:
 80044d8:	4603      	mov	r3, r0
 80044da:	4402      	add	r2, r0
 80044dc:	4293      	cmp	r3, r2
 80044de:	d100      	bne.n	80044e2 <memset+0xa>
 80044e0:	4770      	bx	lr
 80044e2:	f803 1b01 	strb.w	r1, [r3], #1
 80044e6:	e7f9      	b.n	80044dc <memset+0x4>

080044e8 <_close_r>:
 80044e8:	b538      	push	{r3, r4, r5, lr}
 80044ea:	2300      	movs	r3, #0
 80044ec:	4d05      	ldr	r5, [pc, #20]	@ (8004504 <_close_r+0x1c>)
 80044ee:	4604      	mov	r4, r0
 80044f0:	4608      	mov	r0, r1
 80044f2:	602b      	str	r3, [r5, #0]
 80044f4:	f7fc f8b0 	bl	8000658 <_close>
 80044f8:	1c43      	adds	r3, r0, #1
 80044fa:	d102      	bne.n	8004502 <_close_r+0x1a>
 80044fc:	682b      	ldr	r3, [r5, #0]
 80044fe:	b103      	cbz	r3, 8004502 <_close_r+0x1a>
 8004500:	6023      	str	r3, [r4, #0]
 8004502:	bd38      	pop	{r3, r4, r5, pc}
 8004504:	200011c8 	.word	0x200011c8

08004508 <_lseek_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	4604      	mov	r4, r0
 800450c:	4608      	mov	r0, r1
 800450e:	4611      	mov	r1, r2
 8004510:	2200      	movs	r2, #0
 8004512:	4d05      	ldr	r5, [pc, #20]	@ (8004528 <_lseek_r+0x20>)
 8004514:	602a      	str	r2, [r5, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	f7fc f8c2 	bl	80006a0 <_lseek>
 800451c:	1c43      	adds	r3, r0, #1
 800451e:	d102      	bne.n	8004526 <_lseek_r+0x1e>
 8004520:	682b      	ldr	r3, [r5, #0]
 8004522:	b103      	cbz	r3, 8004526 <_lseek_r+0x1e>
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	bd38      	pop	{r3, r4, r5, pc}
 8004528:	200011c8 	.word	0x200011c8

0800452c <_read_r>:
 800452c:	b538      	push	{r3, r4, r5, lr}
 800452e:	4604      	mov	r4, r0
 8004530:	4608      	mov	r0, r1
 8004532:	4611      	mov	r1, r2
 8004534:	2200      	movs	r2, #0
 8004536:	4d05      	ldr	r5, [pc, #20]	@ (800454c <_read_r+0x20>)
 8004538:	602a      	str	r2, [r5, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	f7fc f853 	bl	80005e6 <_read>
 8004540:	1c43      	adds	r3, r0, #1
 8004542:	d102      	bne.n	800454a <_read_r+0x1e>
 8004544:	682b      	ldr	r3, [r5, #0]
 8004546:	b103      	cbz	r3, 800454a <_read_r+0x1e>
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	bd38      	pop	{r3, r4, r5, pc}
 800454c:	200011c8 	.word	0x200011c8

08004550 <_write_r>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	4604      	mov	r4, r0
 8004554:	4608      	mov	r0, r1
 8004556:	4611      	mov	r1, r2
 8004558:	2200      	movs	r2, #0
 800455a:	4d05      	ldr	r5, [pc, #20]	@ (8004570 <_write_r+0x20>)
 800455c:	602a      	str	r2, [r5, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	f7fc f85e 	bl	8000620 <_write>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d102      	bne.n	800456e <_write_r+0x1e>
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	b103      	cbz	r3, 800456e <_write_r+0x1e>
 800456c:	6023      	str	r3, [r4, #0]
 800456e:	bd38      	pop	{r3, r4, r5, pc}
 8004570:	200011c8 	.word	0x200011c8

08004574 <__errno>:
 8004574:	4b01      	ldr	r3, [pc, #4]	@ (800457c <__errno+0x8>)
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	2000001c 	.word	0x2000001c

08004580 <__libc_init_array>:
 8004580:	b570      	push	{r4, r5, r6, lr}
 8004582:	2600      	movs	r6, #0
 8004584:	4d0c      	ldr	r5, [pc, #48]	@ (80045b8 <__libc_init_array+0x38>)
 8004586:	4c0d      	ldr	r4, [pc, #52]	@ (80045bc <__libc_init_array+0x3c>)
 8004588:	1b64      	subs	r4, r4, r5
 800458a:	10a4      	asrs	r4, r4, #2
 800458c:	42a6      	cmp	r6, r4
 800458e:	d109      	bne.n	80045a4 <__libc_init_array+0x24>
 8004590:	f000 fa5e 	bl	8004a50 <_init>
 8004594:	2600      	movs	r6, #0
 8004596:	4d0a      	ldr	r5, [pc, #40]	@ (80045c0 <__libc_init_array+0x40>)
 8004598:	4c0a      	ldr	r4, [pc, #40]	@ (80045c4 <__libc_init_array+0x44>)
 800459a:	1b64      	subs	r4, r4, r5
 800459c:	10a4      	asrs	r4, r4, #2
 800459e:	42a6      	cmp	r6, r4
 80045a0:	d105      	bne.n	80045ae <__libc_init_array+0x2e>
 80045a2:	bd70      	pop	{r4, r5, r6, pc}
 80045a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a8:	4798      	blx	r3
 80045aa:	3601      	adds	r6, #1
 80045ac:	e7ee      	b.n	800458c <__libc_init_array+0xc>
 80045ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b2:	4798      	blx	r3
 80045b4:	3601      	adds	r6, #1
 80045b6:	e7f2      	b.n	800459e <__libc_init_array+0x1e>
 80045b8:	08004bf8 	.word	0x08004bf8
 80045bc:	08004bf8 	.word	0x08004bf8
 80045c0:	08004bf8 	.word	0x08004bf8
 80045c4:	08004bfc 	.word	0x08004bfc

080045c8 <__retarget_lock_init_recursive>:
 80045c8:	4770      	bx	lr

080045ca <__retarget_lock_acquire_recursive>:
 80045ca:	4770      	bx	lr

080045cc <__retarget_lock_release_recursive>:
 80045cc:	4770      	bx	lr

080045ce <memcpy>:
 80045ce:	440a      	add	r2, r1
 80045d0:	4291      	cmp	r1, r2
 80045d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80045d6:	d100      	bne.n	80045da <memcpy+0xc>
 80045d8:	4770      	bx	lr
 80045da:	b510      	push	{r4, lr}
 80045dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045e0:	4291      	cmp	r1, r2
 80045e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045e6:	d1f9      	bne.n	80045dc <memcpy+0xe>
 80045e8:	bd10      	pop	{r4, pc}
	...

080045ec <_free_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4605      	mov	r5, r0
 80045f0:	2900      	cmp	r1, #0
 80045f2:	d040      	beq.n	8004676 <_free_r+0x8a>
 80045f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045f8:	1f0c      	subs	r4, r1, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bfb8      	it	lt
 80045fe:	18e4      	addlt	r4, r4, r3
 8004600:	f000 f8de 	bl	80047c0 <__malloc_lock>
 8004604:	4a1c      	ldr	r2, [pc, #112]	@ (8004678 <_free_r+0x8c>)
 8004606:	6813      	ldr	r3, [r2, #0]
 8004608:	b933      	cbnz	r3, 8004618 <_free_r+0x2c>
 800460a:	6063      	str	r3, [r4, #4]
 800460c:	6014      	str	r4, [r2, #0]
 800460e:	4628      	mov	r0, r5
 8004610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004614:	f000 b8da 	b.w	80047cc <__malloc_unlock>
 8004618:	42a3      	cmp	r3, r4
 800461a:	d908      	bls.n	800462e <_free_r+0x42>
 800461c:	6820      	ldr	r0, [r4, #0]
 800461e:	1821      	adds	r1, r4, r0
 8004620:	428b      	cmp	r3, r1
 8004622:	bf01      	itttt	eq
 8004624:	6819      	ldreq	r1, [r3, #0]
 8004626:	685b      	ldreq	r3, [r3, #4]
 8004628:	1809      	addeq	r1, r1, r0
 800462a:	6021      	streq	r1, [r4, #0]
 800462c:	e7ed      	b.n	800460a <_free_r+0x1e>
 800462e:	461a      	mov	r2, r3
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	b10b      	cbz	r3, 8004638 <_free_r+0x4c>
 8004634:	42a3      	cmp	r3, r4
 8004636:	d9fa      	bls.n	800462e <_free_r+0x42>
 8004638:	6811      	ldr	r1, [r2, #0]
 800463a:	1850      	adds	r0, r2, r1
 800463c:	42a0      	cmp	r0, r4
 800463e:	d10b      	bne.n	8004658 <_free_r+0x6c>
 8004640:	6820      	ldr	r0, [r4, #0]
 8004642:	4401      	add	r1, r0
 8004644:	1850      	adds	r0, r2, r1
 8004646:	4283      	cmp	r3, r0
 8004648:	6011      	str	r1, [r2, #0]
 800464a:	d1e0      	bne.n	800460e <_free_r+0x22>
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4408      	add	r0, r1
 8004652:	6010      	str	r0, [r2, #0]
 8004654:	6053      	str	r3, [r2, #4]
 8004656:	e7da      	b.n	800460e <_free_r+0x22>
 8004658:	d902      	bls.n	8004660 <_free_r+0x74>
 800465a:	230c      	movs	r3, #12
 800465c:	602b      	str	r3, [r5, #0]
 800465e:	e7d6      	b.n	800460e <_free_r+0x22>
 8004660:	6820      	ldr	r0, [r4, #0]
 8004662:	1821      	adds	r1, r4, r0
 8004664:	428b      	cmp	r3, r1
 8004666:	bf01      	itttt	eq
 8004668:	6819      	ldreq	r1, [r3, #0]
 800466a:	685b      	ldreq	r3, [r3, #4]
 800466c:	1809      	addeq	r1, r1, r0
 800466e:	6021      	streq	r1, [r4, #0]
 8004670:	6063      	str	r3, [r4, #4]
 8004672:	6054      	str	r4, [r2, #4]
 8004674:	e7cb      	b.n	800460e <_free_r+0x22>
 8004676:	bd38      	pop	{r3, r4, r5, pc}
 8004678:	200011d4 	.word	0x200011d4

0800467c <sbrk_aligned>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	4e0f      	ldr	r6, [pc, #60]	@ (80046bc <sbrk_aligned+0x40>)
 8004680:	460c      	mov	r4, r1
 8004682:	6831      	ldr	r1, [r6, #0]
 8004684:	4605      	mov	r5, r0
 8004686:	b911      	cbnz	r1, 800468e <sbrk_aligned+0x12>
 8004688:	f000 f9d2 	bl	8004a30 <_sbrk_r>
 800468c:	6030      	str	r0, [r6, #0]
 800468e:	4621      	mov	r1, r4
 8004690:	4628      	mov	r0, r5
 8004692:	f000 f9cd 	bl	8004a30 <_sbrk_r>
 8004696:	1c43      	adds	r3, r0, #1
 8004698:	d103      	bne.n	80046a2 <sbrk_aligned+0x26>
 800469a:	f04f 34ff 	mov.w	r4, #4294967295
 800469e:	4620      	mov	r0, r4
 80046a0:	bd70      	pop	{r4, r5, r6, pc}
 80046a2:	1cc4      	adds	r4, r0, #3
 80046a4:	f024 0403 	bic.w	r4, r4, #3
 80046a8:	42a0      	cmp	r0, r4
 80046aa:	d0f8      	beq.n	800469e <sbrk_aligned+0x22>
 80046ac:	1a21      	subs	r1, r4, r0
 80046ae:	4628      	mov	r0, r5
 80046b0:	f000 f9be 	bl	8004a30 <_sbrk_r>
 80046b4:	3001      	adds	r0, #1
 80046b6:	d1f2      	bne.n	800469e <sbrk_aligned+0x22>
 80046b8:	e7ef      	b.n	800469a <sbrk_aligned+0x1e>
 80046ba:	bf00      	nop
 80046bc:	200011d0 	.word	0x200011d0

080046c0 <_malloc_r>:
 80046c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046c4:	1ccd      	adds	r5, r1, #3
 80046c6:	f025 0503 	bic.w	r5, r5, #3
 80046ca:	3508      	adds	r5, #8
 80046cc:	2d0c      	cmp	r5, #12
 80046ce:	bf38      	it	cc
 80046d0:	250c      	movcc	r5, #12
 80046d2:	2d00      	cmp	r5, #0
 80046d4:	4606      	mov	r6, r0
 80046d6:	db01      	blt.n	80046dc <_malloc_r+0x1c>
 80046d8:	42a9      	cmp	r1, r5
 80046da:	d904      	bls.n	80046e6 <_malloc_r+0x26>
 80046dc:	230c      	movs	r3, #12
 80046de:	6033      	str	r3, [r6, #0]
 80046e0:	2000      	movs	r0, #0
 80046e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047bc <_malloc_r+0xfc>
 80046ea:	f000 f869 	bl	80047c0 <__malloc_lock>
 80046ee:	f8d8 3000 	ldr.w	r3, [r8]
 80046f2:	461c      	mov	r4, r3
 80046f4:	bb44      	cbnz	r4, 8004748 <_malloc_r+0x88>
 80046f6:	4629      	mov	r1, r5
 80046f8:	4630      	mov	r0, r6
 80046fa:	f7ff ffbf 	bl	800467c <sbrk_aligned>
 80046fe:	1c43      	adds	r3, r0, #1
 8004700:	4604      	mov	r4, r0
 8004702:	d158      	bne.n	80047b6 <_malloc_r+0xf6>
 8004704:	f8d8 4000 	ldr.w	r4, [r8]
 8004708:	4627      	mov	r7, r4
 800470a:	2f00      	cmp	r7, #0
 800470c:	d143      	bne.n	8004796 <_malloc_r+0xd6>
 800470e:	2c00      	cmp	r4, #0
 8004710:	d04b      	beq.n	80047aa <_malloc_r+0xea>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	4639      	mov	r1, r7
 8004716:	4630      	mov	r0, r6
 8004718:	eb04 0903 	add.w	r9, r4, r3
 800471c:	f000 f988 	bl	8004a30 <_sbrk_r>
 8004720:	4581      	cmp	r9, r0
 8004722:	d142      	bne.n	80047aa <_malloc_r+0xea>
 8004724:	6821      	ldr	r1, [r4, #0]
 8004726:	4630      	mov	r0, r6
 8004728:	1a6d      	subs	r5, r5, r1
 800472a:	4629      	mov	r1, r5
 800472c:	f7ff ffa6 	bl	800467c <sbrk_aligned>
 8004730:	3001      	adds	r0, #1
 8004732:	d03a      	beq.n	80047aa <_malloc_r+0xea>
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	442b      	add	r3, r5
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	f8d8 3000 	ldr.w	r3, [r8]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	bb62      	cbnz	r2, 800479c <_malloc_r+0xdc>
 8004742:	f8c8 7000 	str.w	r7, [r8]
 8004746:	e00f      	b.n	8004768 <_malloc_r+0xa8>
 8004748:	6822      	ldr	r2, [r4, #0]
 800474a:	1b52      	subs	r2, r2, r5
 800474c:	d420      	bmi.n	8004790 <_malloc_r+0xd0>
 800474e:	2a0b      	cmp	r2, #11
 8004750:	d917      	bls.n	8004782 <_malloc_r+0xc2>
 8004752:	1961      	adds	r1, r4, r5
 8004754:	42a3      	cmp	r3, r4
 8004756:	6025      	str	r5, [r4, #0]
 8004758:	bf18      	it	ne
 800475a:	6059      	strne	r1, [r3, #4]
 800475c:	6863      	ldr	r3, [r4, #4]
 800475e:	bf08      	it	eq
 8004760:	f8c8 1000 	streq.w	r1, [r8]
 8004764:	5162      	str	r2, [r4, r5]
 8004766:	604b      	str	r3, [r1, #4]
 8004768:	4630      	mov	r0, r6
 800476a:	f000 f82f 	bl	80047cc <__malloc_unlock>
 800476e:	f104 000b 	add.w	r0, r4, #11
 8004772:	1d23      	adds	r3, r4, #4
 8004774:	f020 0007 	bic.w	r0, r0, #7
 8004778:	1ac2      	subs	r2, r0, r3
 800477a:	bf1c      	itt	ne
 800477c:	1a1b      	subne	r3, r3, r0
 800477e:	50a3      	strne	r3, [r4, r2]
 8004780:	e7af      	b.n	80046e2 <_malloc_r+0x22>
 8004782:	6862      	ldr	r2, [r4, #4]
 8004784:	42a3      	cmp	r3, r4
 8004786:	bf0c      	ite	eq
 8004788:	f8c8 2000 	streq.w	r2, [r8]
 800478c:	605a      	strne	r2, [r3, #4]
 800478e:	e7eb      	b.n	8004768 <_malloc_r+0xa8>
 8004790:	4623      	mov	r3, r4
 8004792:	6864      	ldr	r4, [r4, #4]
 8004794:	e7ae      	b.n	80046f4 <_malloc_r+0x34>
 8004796:	463c      	mov	r4, r7
 8004798:	687f      	ldr	r7, [r7, #4]
 800479a:	e7b6      	b.n	800470a <_malloc_r+0x4a>
 800479c:	461a      	mov	r2, r3
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	42a3      	cmp	r3, r4
 80047a2:	d1fb      	bne.n	800479c <_malloc_r+0xdc>
 80047a4:	2300      	movs	r3, #0
 80047a6:	6053      	str	r3, [r2, #4]
 80047a8:	e7de      	b.n	8004768 <_malloc_r+0xa8>
 80047aa:	230c      	movs	r3, #12
 80047ac:	4630      	mov	r0, r6
 80047ae:	6033      	str	r3, [r6, #0]
 80047b0:	f000 f80c 	bl	80047cc <__malloc_unlock>
 80047b4:	e794      	b.n	80046e0 <_malloc_r+0x20>
 80047b6:	6005      	str	r5, [r0, #0]
 80047b8:	e7d6      	b.n	8004768 <_malloc_r+0xa8>
 80047ba:	bf00      	nop
 80047bc:	200011d4 	.word	0x200011d4

080047c0 <__malloc_lock>:
 80047c0:	4801      	ldr	r0, [pc, #4]	@ (80047c8 <__malloc_lock+0x8>)
 80047c2:	f7ff bf02 	b.w	80045ca <__retarget_lock_acquire_recursive>
 80047c6:	bf00      	nop
 80047c8:	200011cc 	.word	0x200011cc

080047cc <__malloc_unlock>:
 80047cc:	4801      	ldr	r0, [pc, #4]	@ (80047d4 <__malloc_unlock+0x8>)
 80047ce:	f7ff befd 	b.w	80045cc <__retarget_lock_release_recursive>
 80047d2:	bf00      	nop
 80047d4:	200011cc 	.word	0x200011cc

080047d8 <__sflush_r>:
 80047d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	0716      	lsls	r6, r2, #28
 80047e0:	4605      	mov	r5, r0
 80047e2:	460c      	mov	r4, r1
 80047e4:	d454      	bmi.n	8004890 <__sflush_r+0xb8>
 80047e6:	684b      	ldr	r3, [r1, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	dc02      	bgt.n	80047f2 <__sflush_r+0x1a>
 80047ec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	dd48      	ble.n	8004884 <__sflush_r+0xac>
 80047f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047f4:	2e00      	cmp	r6, #0
 80047f6:	d045      	beq.n	8004884 <__sflush_r+0xac>
 80047f8:	2300      	movs	r3, #0
 80047fa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80047fe:	682f      	ldr	r7, [r5, #0]
 8004800:	6a21      	ldr	r1, [r4, #32]
 8004802:	602b      	str	r3, [r5, #0]
 8004804:	d030      	beq.n	8004868 <__sflush_r+0x90>
 8004806:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	0759      	lsls	r1, r3, #29
 800480c:	d505      	bpl.n	800481a <__sflush_r+0x42>
 800480e:	6863      	ldr	r3, [r4, #4]
 8004810:	1ad2      	subs	r2, r2, r3
 8004812:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004814:	b10b      	cbz	r3, 800481a <__sflush_r+0x42>
 8004816:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004818:	1ad2      	subs	r2, r2, r3
 800481a:	2300      	movs	r3, #0
 800481c:	4628      	mov	r0, r5
 800481e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004820:	6a21      	ldr	r1, [r4, #32]
 8004822:	47b0      	blx	r6
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	d106      	bne.n	8004838 <__sflush_r+0x60>
 800482a:	6829      	ldr	r1, [r5, #0]
 800482c:	291d      	cmp	r1, #29
 800482e:	d82b      	bhi.n	8004888 <__sflush_r+0xb0>
 8004830:	4a28      	ldr	r2, [pc, #160]	@ (80048d4 <__sflush_r+0xfc>)
 8004832:	410a      	asrs	r2, r1
 8004834:	07d6      	lsls	r6, r2, #31
 8004836:	d427      	bmi.n	8004888 <__sflush_r+0xb0>
 8004838:	2200      	movs	r2, #0
 800483a:	6062      	str	r2, [r4, #4]
 800483c:	6922      	ldr	r2, [r4, #16]
 800483e:	04d9      	lsls	r1, r3, #19
 8004840:	6022      	str	r2, [r4, #0]
 8004842:	d504      	bpl.n	800484e <__sflush_r+0x76>
 8004844:	1c42      	adds	r2, r0, #1
 8004846:	d101      	bne.n	800484c <__sflush_r+0x74>
 8004848:	682b      	ldr	r3, [r5, #0]
 800484a:	b903      	cbnz	r3, 800484e <__sflush_r+0x76>
 800484c:	6560      	str	r0, [r4, #84]	@ 0x54
 800484e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004850:	602f      	str	r7, [r5, #0]
 8004852:	b1b9      	cbz	r1, 8004884 <__sflush_r+0xac>
 8004854:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004858:	4299      	cmp	r1, r3
 800485a:	d002      	beq.n	8004862 <__sflush_r+0x8a>
 800485c:	4628      	mov	r0, r5
 800485e:	f7ff fec5 	bl	80045ec <_free_r>
 8004862:	2300      	movs	r3, #0
 8004864:	6363      	str	r3, [r4, #52]	@ 0x34
 8004866:	e00d      	b.n	8004884 <__sflush_r+0xac>
 8004868:	2301      	movs	r3, #1
 800486a:	4628      	mov	r0, r5
 800486c:	47b0      	blx	r6
 800486e:	4602      	mov	r2, r0
 8004870:	1c50      	adds	r0, r2, #1
 8004872:	d1c9      	bne.n	8004808 <__sflush_r+0x30>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0c6      	beq.n	8004808 <__sflush_r+0x30>
 800487a:	2b1d      	cmp	r3, #29
 800487c:	d001      	beq.n	8004882 <__sflush_r+0xaa>
 800487e:	2b16      	cmp	r3, #22
 8004880:	d11d      	bne.n	80048be <__sflush_r+0xe6>
 8004882:	602f      	str	r7, [r5, #0]
 8004884:	2000      	movs	r0, #0
 8004886:	e021      	b.n	80048cc <__sflush_r+0xf4>
 8004888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800488c:	b21b      	sxth	r3, r3
 800488e:	e01a      	b.n	80048c6 <__sflush_r+0xee>
 8004890:	690f      	ldr	r7, [r1, #16]
 8004892:	2f00      	cmp	r7, #0
 8004894:	d0f6      	beq.n	8004884 <__sflush_r+0xac>
 8004896:	0793      	lsls	r3, r2, #30
 8004898:	bf18      	it	ne
 800489a:	2300      	movne	r3, #0
 800489c:	680e      	ldr	r6, [r1, #0]
 800489e:	bf08      	it	eq
 80048a0:	694b      	ldreq	r3, [r1, #20]
 80048a2:	1bf6      	subs	r6, r6, r7
 80048a4:	600f      	str	r7, [r1, #0]
 80048a6:	608b      	str	r3, [r1, #8]
 80048a8:	2e00      	cmp	r6, #0
 80048aa:	ddeb      	ble.n	8004884 <__sflush_r+0xac>
 80048ac:	4633      	mov	r3, r6
 80048ae:	463a      	mov	r2, r7
 80048b0:	4628      	mov	r0, r5
 80048b2:	6a21      	ldr	r1, [r4, #32]
 80048b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80048b8:	47e0      	blx	ip
 80048ba:	2800      	cmp	r0, #0
 80048bc:	dc07      	bgt.n	80048ce <__sflush_r+0xf6>
 80048be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048c6:	f04f 30ff 	mov.w	r0, #4294967295
 80048ca:	81a3      	strh	r3, [r4, #12]
 80048cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048ce:	4407      	add	r7, r0
 80048d0:	1a36      	subs	r6, r6, r0
 80048d2:	e7e9      	b.n	80048a8 <__sflush_r+0xd0>
 80048d4:	dfbffffe 	.word	0xdfbffffe

080048d8 <_fflush_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	690b      	ldr	r3, [r1, #16]
 80048dc:	4605      	mov	r5, r0
 80048de:	460c      	mov	r4, r1
 80048e0:	b913      	cbnz	r3, 80048e8 <_fflush_r+0x10>
 80048e2:	2500      	movs	r5, #0
 80048e4:	4628      	mov	r0, r5
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	b118      	cbz	r0, 80048f2 <_fflush_r+0x1a>
 80048ea:	6a03      	ldr	r3, [r0, #32]
 80048ec:	b90b      	cbnz	r3, 80048f2 <_fflush_r+0x1a>
 80048ee:	f7ff fc87 	bl	8004200 <__sinit>
 80048f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f3      	beq.n	80048e2 <_fflush_r+0xa>
 80048fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80048fc:	07d0      	lsls	r0, r2, #31
 80048fe:	d404      	bmi.n	800490a <_fflush_r+0x32>
 8004900:	0599      	lsls	r1, r3, #22
 8004902:	d402      	bmi.n	800490a <_fflush_r+0x32>
 8004904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004906:	f7ff fe60 	bl	80045ca <__retarget_lock_acquire_recursive>
 800490a:	4628      	mov	r0, r5
 800490c:	4621      	mov	r1, r4
 800490e:	f7ff ff63 	bl	80047d8 <__sflush_r>
 8004912:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004914:	4605      	mov	r5, r0
 8004916:	07da      	lsls	r2, r3, #31
 8004918:	d4e4      	bmi.n	80048e4 <_fflush_r+0xc>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	059b      	lsls	r3, r3, #22
 800491e:	d4e1      	bmi.n	80048e4 <_fflush_r+0xc>
 8004920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004922:	f7ff fe53 	bl	80045cc <__retarget_lock_release_recursive>
 8004926:	e7dd      	b.n	80048e4 <_fflush_r+0xc>

08004928 <__swhatbuf_r>:
 8004928:	b570      	push	{r4, r5, r6, lr}
 800492a:	460c      	mov	r4, r1
 800492c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004930:	4615      	mov	r5, r2
 8004932:	2900      	cmp	r1, #0
 8004934:	461e      	mov	r6, r3
 8004936:	b096      	sub	sp, #88	@ 0x58
 8004938:	da0c      	bge.n	8004954 <__swhatbuf_r+0x2c>
 800493a:	89a3      	ldrh	r3, [r4, #12]
 800493c:	2100      	movs	r1, #0
 800493e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004942:	bf14      	ite	ne
 8004944:	2340      	movne	r3, #64	@ 0x40
 8004946:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800494a:	2000      	movs	r0, #0
 800494c:	6031      	str	r1, [r6, #0]
 800494e:	602b      	str	r3, [r5, #0]
 8004950:	b016      	add	sp, #88	@ 0x58
 8004952:	bd70      	pop	{r4, r5, r6, pc}
 8004954:	466a      	mov	r2, sp
 8004956:	f000 f849 	bl	80049ec <_fstat_r>
 800495a:	2800      	cmp	r0, #0
 800495c:	dbed      	blt.n	800493a <__swhatbuf_r+0x12>
 800495e:	9901      	ldr	r1, [sp, #4]
 8004960:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004964:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004968:	4259      	negs	r1, r3
 800496a:	4159      	adcs	r1, r3
 800496c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004970:	e7eb      	b.n	800494a <__swhatbuf_r+0x22>

08004972 <__smakebuf_r>:
 8004972:	898b      	ldrh	r3, [r1, #12]
 8004974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004976:	079d      	lsls	r5, r3, #30
 8004978:	4606      	mov	r6, r0
 800497a:	460c      	mov	r4, r1
 800497c:	d507      	bpl.n	800498e <__smakebuf_r+0x1c>
 800497e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	6123      	str	r3, [r4, #16]
 8004986:	2301      	movs	r3, #1
 8004988:	6163      	str	r3, [r4, #20]
 800498a:	b003      	add	sp, #12
 800498c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800498e:	466a      	mov	r2, sp
 8004990:	ab01      	add	r3, sp, #4
 8004992:	f7ff ffc9 	bl	8004928 <__swhatbuf_r>
 8004996:	9f00      	ldr	r7, [sp, #0]
 8004998:	4605      	mov	r5, r0
 800499a:	4639      	mov	r1, r7
 800499c:	4630      	mov	r0, r6
 800499e:	f7ff fe8f 	bl	80046c0 <_malloc_r>
 80049a2:	b948      	cbnz	r0, 80049b8 <__smakebuf_r+0x46>
 80049a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a8:	059a      	lsls	r2, r3, #22
 80049aa:	d4ee      	bmi.n	800498a <__smakebuf_r+0x18>
 80049ac:	f023 0303 	bic.w	r3, r3, #3
 80049b0:	f043 0302 	orr.w	r3, r3, #2
 80049b4:	81a3      	strh	r3, [r4, #12]
 80049b6:	e7e2      	b.n	800497e <__smakebuf_r+0xc>
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80049be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049c2:	81a3      	strh	r3, [r4, #12]
 80049c4:	9b01      	ldr	r3, [sp, #4]
 80049c6:	6020      	str	r0, [r4, #0]
 80049c8:	b15b      	cbz	r3, 80049e2 <__smakebuf_r+0x70>
 80049ca:	4630      	mov	r0, r6
 80049cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049d0:	f000 f81e 	bl	8004a10 <_isatty_r>
 80049d4:	b128      	cbz	r0, 80049e2 <__smakebuf_r+0x70>
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	f023 0303 	bic.w	r3, r3, #3
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	81a3      	strh	r3, [r4, #12]
 80049e2:	89a3      	ldrh	r3, [r4, #12]
 80049e4:	431d      	orrs	r5, r3
 80049e6:	81a5      	strh	r5, [r4, #12]
 80049e8:	e7cf      	b.n	800498a <__smakebuf_r+0x18>
	...

080049ec <_fstat_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	2300      	movs	r3, #0
 80049f0:	4d06      	ldr	r5, [pc, #24]	@ (8004a0c <_fstat_r+0x20>)
 80049f2:	4604      	mov	r4, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	4611      	mov	r1, r2
 80049f8:	602b      	str	r3, [r5, #0]
 80049fa:	f7fb fe38 	bl	800066e <_fstat>
 80049fe:	1c43      	adds	r3, r0, #1
 8004a00:	d102      	bne.n	8004a08 <_fstat_r+0x1c>
 8004a02:	682b      	ldr	r3, [r5, #0]
 8004a04:	b103      	cbz	r3, 8004a08 <_fstat_r+0x1c>
 8004a06:	6023      	str	r3, [r4, #0]
 8004a08:	bd38      	pop	{r3, r4, r5, pc}
 8004a0a:	bf00      	nop
 8004a0c:	200011c8 	.word	0x200011c8

08004a10 <_isatty_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	2300      	movs	r3, #0
 8004a14:	4d05      	ldr	r5, [pc, #20]	@ (8004a2c <_isatty_r+0x1c>)
 8004a16:	4604      	mov	r4, r0
 8004a18:	4608      	mov	r0, r1
 8004a1a:	602b      	str	r3, [r5, #0]
 8004a1c:	f7fb fe36 	bl	800068c <_isatty>
 8004a20:	1c43      	adds	r3, r0, #1
 8004a22:	d102      	bne.n	8004a2a <_isatty_r+0x1a>
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	b103      	cbz	r3, 8004a2a <_isatty_r+0x1a>
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	200011c8 	.word	0x200011c8

08004a30 <_sbrk_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	2300      	movs	r3, #0
 8004a34:	4d05      	ldr	r5, [pc, #20]	@ (8004a4c <_sbrk_r+0x1c>)
 8004a36:	4604      	mov	r4, r0
 8004a38:	4608      	mov	r0, r1
 8004a3a:	602b      	str	r3, [r5, #0]
 8004a3c:	f7fb fe3c 	bl	80006b8 <_sbrk>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	d102      	bne.n	8004a4a <_sbrk_r+0x1a>
 8004a44:	682b      	ldr	r3, [r5, #0]
 8004a46:	b103      	cbz	r3, 8004a4a <_sbrk_r+0x1a>
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	200011c8 	.word	0x200011c8

08004a50 <_init>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	bf00      	nop
 8004a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a56:	bc08      	pop	{r3}
 8004a58:	469e      	mov	lr, r3
 8004a5a:	4770      	bx	lr

08004a5c <_fini>:
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5e:	bf00      	nop
 8004a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a62:	bc08      	pop	{r3}
 8004a64:	469e      	mov	lr, r3
 8004a66:	4770      	bx	lr
